<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetZen.CodeDom.Patterns</name>
    </assembly>
    <members>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration">
            <summary>
            Represents the declaration of a type to which patterns can be applied.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.#ctor">
            <summary>
            Initializes a new instance of the CodePatternTypeDeclaration class.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CodePatternTypeDeclaration class.
            </summary>
            <param name="name">The name of the type.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CodePatternTypeDeclaration class.
            </summary>
            <param name="automaticComments">true if you wish for the members generated by the patterns to automatically have xml comments.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the CodePatternTypeDeclaration class.
            </summary>
            <param name="name">The name of the type.</param>
            <param name="automaticComments">true if you wish for the members generated by the patterns to automatically have xml comments.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplyDisposablePattern(DotNetZen.CodeDom.Patterns.DisposeImplementationType,DotNetZen.CodeDom.InterfaceImplementationType,DotNetZen.CodeDom.CodeInstanceReferenceExpression[])">
            <summary>
            Applies the implementation of the dispose pattern using the <see cref="T:System.IDisposable"/> interface.
            </summary>
            <remarks>Please note: A bug in the .net frameworks up to 2.0 does not allow for creation of finalizers (destructors),
            which means that the pattern is incomplete. Please vote on this issue:
            http://lab.msdn.microsoft.com/ProductFeedback/viewFeedback.aspx?feedbackId=FDBK48431 </remarks>
            <example>Output example:<code>
            public class MyType : System.IDisposable
            {
            	/// &lt;summary&gt;
            	/// Releases all resources used by the object.
            	/// &lt;/summary&gt;
            	public void Dispose()
            	{
            		this.Dispose(true);
            		System.GC.SuppressFinalize(this);
            	}
            
            	/// &lt;summary&gt;
            	/// Releases the unmanaged resources used by the object and optionally releases the managed resources.
            	/// &lt;/summary&gt;
            	/// &lt;param name="disposing"&gt;true to release both managed and unmanaged resources; false to release only unmanaged resources.&lt;/param&gt;
            	/// &lt;remarks&gt;This method is called by the public &lt;see cref="Dispose()" /&gt; method and the Finalize method.
            	/// &lt;see cref="Dispose" /&gt; invokes the protected &lt;see cref="Dispose(System.Boolean)" /&gt; method with the &lt;paramref name="disposing" /&gt; parameter set to true.
            	/// Finalize invokes Dispose with &lt;paramref name="disposing" /&gt; set to false.
            	/// When the &lt;paramref name="disposing" /&gt; parameter is true, this method releases all resources held by any managed objects that this object references.
            	/// This method invokes the &lt;see cref="Dispose()" /&gt; method of each referenced object.
            	/// Notes to Inheritors: This method can be called multiple times by other objects. When overriding it, be careful not to reference objects that have been previously disposed of in an earlier call.&lt;/remarks&gt;
            	protected virtual void Dispose(bool disposing)
            	{
            		if ((disposing == true))
            		{
            			if ((this.myReferenceTypeField != null))
            			{
            				((System.IDisposable)(this.myReferenceTypeField)).Dispose();
            			}
            			((System.IDisposable)(this.myValueTypeField)).Dispose();
            		}
            	}
            }
            </code></example>
            <param name="disposeType">Whether this is the first time the type's hierarchy has implemented the pattern.</param>
            <param name="implementationType">The way the implement the <see cref="T:System.IDisposable"/> interface.</param>
            <param name="objectsToDispose">The objects to dispose, such as variables and fields.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is applied when called.</exception>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplyDisposablePattern(DotNetZen.CodeDom.Patterns.DisposeImplementationType,DotNetZen.CodeDom.CodeInstanceReferenceExpression[])">
            <summary>
            Applies the implementation of the dispose pattern using the <see cref="T:System.IDisposable"/> interface.
            </summary>
            <remarks>Implementation type is inferred to be <see cref="F:DotNetZen.CodeDom.InterfaceImplementationType.Implicit"/>.
            Please see <see cref="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplyDisposablePattern(DotNetZen.CodeDom.Patterns.DisposeImplementationType,DotNetZen.CodeDom.InterfaceImplementationType,DotNetZen.CodeDom.CodeInstanceReferenceExpression[])"/> for more.</remarks>
            <param name="objectsToDispose">The objects to dispose, such as variables and fields.</param>
            <param name="disposeType">Whether this is the first time the type's hierarchy has implemented the pattern.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is applied when called.</exception>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplyDisposablePattern(DotNetZen.CodeDom.InterfaceImplementationType,DotNetZen.CodeDom.CodeInstanceReferenceExpression[])">
            <summary>
            Applies the implementation of the dispose pattern using the <see cref="T:System.IDisposable"/> interface.
            </summary>
            <remarks>Implementation type is inferred to be <see cref="F:DotNetZen.CodeDom.Patterns.DisposeImplementationType.New"/>.
            Please see <see cref="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplyDisposablePattern(DotNetZen.CodeDom.Patterns.DisposeImplementationType,DotNetZen.CodeDom.InterfaceImplementationType,DotNetZen.CodeDom.CodeInstanceReferenceExpression[])"/> for more.</remarks>
            <param name="objectsToDispose">The objects to dispose, such as variables and fields.</param>
            <param name="implementationType">The way the implement the <see cref="T:System.IDisposable"/> interface.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is applied when called.</exception>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplyDisposablePattern(DotNetZen.CodeDom.CodeInstanceReferenceExpression[])">
            <summary>
            Applies the implementation of the dispose pattern using the <see cref="T:System.IDisposable"/> interface.
            </summary>
            <remarks>Implementation type is inferred to be <see cref="F:DotNetZen.CodeDom.Patterns.DisposeImplementationType.New"/> and <see cref="F:DotNetZen.CodeDom.InterfaceImplementationType.Implicit"/>.
            Please see <see cref="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplyDisposablePattern(DotNetZen.CodeDom.Patterns.DisposeImplementationType,DotNetZen.CodeDom.InterfaceImplementationType,DotNetZen.CodeDom.CodeInstanceReferenceExpression[])"/> for more.</remarks>
            <param name="objectsToDispose">The objects to dispose, such as variables and fields.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is applied when called.</exception>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.RemoveDisposablePattern">
            <summary>
            Removes the implementation of the dispose pattern from the type.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is not applied when called.</exception>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplySerializablePattern(DotNetZen.CodeDom.Patterns.SerializationType)">
            <summary>
            Applies the implementation of the serializable type pattern using the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </summary>
            <param name="serializationType">The type of serialization to apply to the type. See <see cref="T:DotNetZen.CodeDom.Patterns.SerializationType"/> for more information.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is applied when called.</exception>
            <remarks>Please see <see cref="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplySerializablePattern(DotNetZen.CodeDom.Patterns.SerializationType,System.CodeDom.CodeMemberField[])"/> for more.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplySerializablePattern(DotNetZen.CodeDom.Patterns.SerializationType,System.String[])">
            <summary>
            Applies the implementation of the serializable type pattern using the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </summary>
            <param name="serializationType">The type of serialization to apply to the type. See <see cref="T:DotNetZen.CodeDom.Patterns.SerializationType"/> for more information.</param>
            <param name="fieldsToSerialize">The fields to serialize for the type.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is applied when called.</exception>
            <exception cref="T:System.ArgumentException">Thrown if a field passed is marked as static.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a field specified does not exist on the type.</exception>
            <remarks>Please see <see cref="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplySerializablePattern(DotNetZen.CodeDom.Patterns.SerializationType,System.CodeDom.CodeMemberField[])"/> for more.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplySerializablePattern(DotNetZen.CodeDom.Patterns.SerializationType,System.CodeDom.CodeMemberField[])">
             <summary>
             Applies the implementation of the serializable type pattern using the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
             </summary>
             <param name="serializationType">The type of serialization to apply to the type. See <see cref="T:DotNetZen.CodeDom.Patterns.SerializationType"/> for more information.</param>
             <param name="fieldsToSerialize">The <see cref="T:System.CodeDom.CodeMemberField"/> objects that represent the fields to serialize for the type.</param>
             <remarks><example>Output example:<code>
             [System.SerializableAttribute()]
            	public class MyType : System.Runtime.Serialization.ISerializable
            	{
            		private int myField;
            
            		/// &lt;summary&gt;
            		/// Initializes a new instance of the &lt;see cref="MyType" /&gt; class.
            		/// &lt;/summary&gt;
            		/// &lt;param name="info"&gt;The data needed to serialize or deserialize an object.&lt;/param&gt;
            		/// &lt;param name="context"&gt;The source and destination of a given serialized stream.&lt;/param&gt;
            		/// &lt;remarks&gt;This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.&lt;/remarks&gt;
            		protected MyType(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            		{
            			this.myField = ((int)(info.GetValue("myField", typeof(int))));
            		}
            
            		/// &lt;summary&gt;
            		/// Populates a &lt;see cref="System.Runtime.Serialization.SerializationInfo" /&gt; with the data needed to serialize the target object.
            		/// &lt;/summary&gt;
            		/// &lt;param name="info"&gt;The &lt;see cref="System.Runtime.Serialization.SerializationInfo" /&gt; to populate with data.&lt;/param&gt;
            		/// &lt;param name="context"&gt;The destination (see &lt;see cref="System.Runtime.Serialization.StreamingContext" /&gt;) for this serialization.&lt;/param&gt;
            		/// &lt;exception cref="System.ArgumentNullException"&gt;Thrown when the &lt;paramref name="info" /&gt; parameter is a null reference (Nothing in Visual Basic).&lt;/exception&gt;
            		[System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Flags=System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter)]
            		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            		{
            			if ((info == null))
            			{
            				throw new System.ArgumentNullException("info");
            			}
            			info.AddValue("myField", this.myField, typeof(int));
            		}
            	}
            	</code></example></remarks>
             <exception cref="T:System.InvalidOperationException">Thrown if the pattern is applied when called.</exception>
             <exception cref="T:System.ArgumentException">Thrown if a field passed is marked as static.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a field specified does not exist on the type.</exception>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.RemoveSerializablePattern">
            <summary>
            Removes the implementation of the serialization pattern from the type.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is not applied when called.</exception>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.AppliedPatterns">
            <summary>
            Gets the patterns currently applied to the type.
            </summary>
            <value>The patterns currently applied to the type.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.DisposeImplementation">
            <summary>
            Gets the method implementing the <see cref="T:System.IDisposable"/> interface.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is not applied when called.</exception>
            <value>The method implementing the <see cref="T:System.IDisposable"/> interface.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.DisposeCore">
            <summary>
            Gets the method that actually disposes of objects.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is not applied when called.</exception>
            <value>The method that actually disposes of objects.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.SerializableConstructor">
            <summary>
            Gets the deserialization constructor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is not applied when called.</exception>
            <value>The deserialization constructor.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.GetSerializableObjectData">
            <summary>
            Gets the serialization <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> method.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the pattern is not applied when called.</exception>
            <value>The serialization <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> method.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertNotNullStatement">
            <summary>
            Represents an assertion which checks that the argument is not null.
            </summary>
            <example>Output example:<code>
            if ((myArgument == null))
            {
            	throw new System.ArgumentNullException("myArgument");
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertNotNullStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertNotNullStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertNotNullStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertNotNullStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInRangeStatement">
            <summary>
            Represents an assertion which checks that the argument is in a range.
            (upperBound >= argument >= lowerBound) ==> true
            </summary>
            <example>Output example:<code>
            if (((myArgument &gt; MyType.MaxValue) 
            	|| (myArgument &lt; MyType.MinValue)))
            {
            	throw new System.ArgumentOutOfRangeException("myArgument");
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInRangeStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertInRangeStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="lowerBound">The lower bound value.</param>
            <param name="upperBound">The upper bound value.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInRangeStatement.#ctor(System.String,System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertInRangeStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
            <param name="lowerBound">The lower bound value.</param>
            <param name="upperBound">The upper bound value.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInLowerBoundStatement">
            <summary>
            Represents an assertion which checks that the argument is in a range.
            (parameter >= lowerBound) ==> true
            </summary>
            <example>Output example:<code>
            if ((myArgument &lt; MyType.MinValue))
            {
            	throw new System.ArgumentOutOfRangeException("myArgument");
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInLowerBoundStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertInLowerBoundStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="lowerBound">The lower bound value.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInLowerBoundStatement.#ctor(System.String,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertInLowerBoundStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
            <param name="lowerBound">The lower bound value.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInUpperBoundStatement">
            <summary>
            Represents an assertion which checks that the argument is in a range.
            (upperBound >= argument) ==> true
            </summary>
            <example>Output example:<code>
            if ((myArgument &gt; MyType.MaxValue))
            {
            	throw new System.ArgumentOutOfRangeException("myArgument");
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInUpperBoundStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertInUpperBoundStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="upperBound">The lower bound value.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertInUpperBoundStatement.#ctor(System.String,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertInUpperBoundStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
            <param name="upperBound">The lower bound value.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertIsInstanceOfStatement">
            <summary>
            Represents an assertion which checks that the argument is of a certain type.
            </summary>
            <example>Output example:<code>
            if ((myArgument.GetType().IsInstanceOfType(typeof(MyType)) == false))
            {
            	throw new System.ArgumentException(string.Format("The argument myArgument must be of type {0}.", typeof(MyType).FullName), "myArgument");
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertIsInstanceOfStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertIsInstanceOfStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="type">The expected type of argument.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertIsInstanceOfStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression,System.Type)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertIsInstanceOfStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="type">The expected type of argument.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertIsInstanceOfStatement.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertIsInstanceOfStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
            <param name="type">The expected type of argument.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertIsInstanceOfStatement.#ctor(System.String,System.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertIsInstanceOfStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
            <param name="type">The expected type of argument.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertEnumIsDefinedStatement">
            <summary>
            Represents an assertion which checks that the argument is a valid enum value.
            </summary>
            <example>Output example:<code>
            if (Enum.IsDefined(Type.GetType("MyEnum"), myArgument) == false))
            {
            	throw new System.ArgumentException("The argument myArgument is not a member in the enumeration MyEnum.", "myArgument");
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertEnumIsDefinedStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression,System.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertEnumIsDefinedStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="type">The expected type of enum.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertEnumIsDefinedStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression,System.Type)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertEnumIsDefinedStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <param name="type">The expected type of enum.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertEnumIsDefinedStatement.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertEnumIsDefinedStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
            <param name="type">The expected type of enum.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertEnumIsDefinedStatement.#ctor(System.String,System.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertEnumIsDefinedStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
            <param name="type">The expected type of enum.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertStringNotNullOrEmptyStatement">
            <summary>
            Represents an assertion which checks that the string argument is neither null nor empty.
            </summary>
            <example>Output example:<code>
            if ((myArgument == null) || (myArgument == string.Empty))
            {
            	throw new System.ArgumentNullException("myArgument");
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertStringNotNullOrEmptyStatement.#ctor(System.CodeDom.CodeParameterDeclarationExpression)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertStringNotNullOrEmptyStatement class.
            </summary>
            <param name="parameter">The parameter to check.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternArgumentAssertStringNotNullOrEmptyStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CodePatternArgumentAssertStringNotNullOrEmptyStatement class.
            </summary>
            <param name="argumentName">The name argument of the argument to validate.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternForEach">
             <summary>
             Represents the expansion of C#'s foreach keyword.
             </summary>
             <example>Output example:<code>
            	System.Collections.IEnumerator enumerator0 = ((System.Collections.IEnumerator)(myCollection)).GetEnumerator();
            
            	try
            	{
            		for (; enumerator0.MoveNext();)
            		{
            			int element0 = ((int)(enumerator0.Current));
            			// Contained statements ...
            		}
            	}
            	finally
            	{
            		if (((enumerator0 != null) &amp;&amp; enumerator0.GetType().IsInstanceOfType(typeof(System.IDisposable))))
            		{
            			((System.IDisposable)(enumerator0)).Dispose();
            		}
            	}
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternForEach.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.Type,System.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the CodePatternIsExpression class with an implicit collection.
            </summary>
            <param name="elementType">The type of element to expect.</param>
            <param name="collection">The collection to be iterated on.</param>
            <param name="enumeratorType">The type of the enumerating object.</param>
            <param name="statements">Statements inside the block.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternForEach.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the CodePatternIsExpression class with an explicit collection.
            </summary>
            <param name="elementType">The type of element to expect.</param>
            <param name="collection">The collection to be iterated on.</param>
            <param name="statements">Statements inside the block.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternForEach.Statements">
            <summary>
            Gets the statements in the foreach block.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternForEach.CurrentElementName">
            <summary>
            Gets the name of the current element in the iteration.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternFlags">
            <summary>
            Represents the declaration of a flags enum.
            </summary>
            <example>Output example:<code>
            [System.FlagsAttribute()]
            public enum MyFlags : int
            {
            	A = 1,
            	B = 2,
            	C = 4,
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternFlags.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the CodePatternFlags class.
            </summary>
            <param name="name">The name of the enum.</param>
            <param name="values">The names of the flags.</param>
            <remarks>A flags enumeration may have only as many as 63 flags in order to remain CLS compliant.</remarks>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternFlags.Flags(System.String)">
            <summary>
            Gets a flag's <see cref="T:System.CodeDom.CodeMemberField"/> object by name.
            </summary>
            <value>A flag's <see cref="T:System.CodeDom.CodeMemberField"/> object.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternSingleton">
             <summary>
             Represents the base declaration of a class as a Singleton.
             </summary>
             <example>Output example (Lazy Load):<code>
            	public class Foo
            	{
            		private Foo()
            		{
            		}
            
            		/// &lt;summary&gt;
            		/// Gets the single instance of type &lt;see cref="Foo" /&gt;.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The single instance of type &lt;see cref="Foo" /&gt;.&lt;/value&gt;
            		public static Foo Instance
            		{
            			get
            			{
            				return InstanceContainer.Instance;
            			}
            		}
            
            		class InstanceContainer
            		{
            			private static Foo m_Instance = new Foo();
            
            			static InstanceContainer()
            			{
            			}
            
            			private InstanceContainer()
            			{
            			}
            
            			public static Foo Instance
            			{
            				get
            				{
            					return InstanceContainer.m_Instance;
            				}
            			}
            		}
            	}
            	</code></example>
            	<example>Output example (Pre-Load):<code>
            	public class Bar
            	{
            		private static Bar m_Instance = new Bar();
            
            		static Bar()
            		{
            		}
            
            		private Bar()
            		{
            		}
            
            		/// &lt;summary&gt;
            		/// Gets the single instance of type &lt;see cref="Foo" /&gt;.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The single instance of type &lt;see cref="Foo" /&gt;.&lt;/value&gt;
            		public static Bar Instance
            		{
            			get
            			{
            				return Bar.m_Instance;
            			}
            		}
            	}
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternSingleton.#ctor(System.String,DotNetZen.CodeDom.LoadType)">
            <summary>
            Initializes a new instance of the CodePatternSingleton class.
            </summary>
            <param name="name">The name for the new type.</param>
            <param name="loadType">Whether the object should load on first call or first reference.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternSingleton.Name">
            <summary>
            Gets or sets the name of the type.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternSingleton.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternEvent">
             <summary>
             Represents the declaration of an event with an invoker method.
             </summary>
             <remarks>Please note: A bug in the .net frameworks up to 2.0 does not allow for creation of static events,
             which means that the pattern is incomplete. Please vote on this issue:
             http://lab.msdn.microsoft.com/ProductFeedback/viewFeedback.aspx?feedbackId=FDBK39456 </remarks>
            	<example>Instance event output example:<code>
            	public event System.EventHandler EventHappened;
            
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="EventHappened" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="e"&gt;The value passed for the event's e parameter.&lt;/param&gt;
            	protected virtual void OnEventHappened(System.EventArgs e)
            	{
            		if ((this.EventHappened != null))
            		{
            			this.EventHappened(this, e);
            		}
            	}
            	</code>
            	Static event output example:<code>
            	public static event System.EventHandler EventHappened;
            
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="EventHappened" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="sender"&gt;The originating object of the event call.&lt;/param&gt;
            	/// &lt;param name="e"&gt;The value passed for the event's e parameter.&lt;/param&gt;
            	protected static void OnEventHappened(object sender, System.EventArgs e)
            	{
            		if ((MyClass.EventHappened != null))
            		{
            			MyClass.EventHappened(sender, e);
            		}
            	}
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternEvent.#ctor(System.String,DotNetZen.CodeDom.Scope,System.CodeDom.CodeTypeReference,System.CodeDom.CodeTypeReference,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternEvent class.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="scope">The scope of the event.</param>
            <param name="delegateReference">A reference to the delegate type.</param>
            <param name="returnType">The delegate's return type.</param>
            <param name="parameters">The delegate's parameters.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternEvent.#ctor(System.String,DotNetZen.CodeDom.Scope,System.CodeDom.CodeTypeReference,System.CodeDom.CodeTypeDelegate)">
            <summary>
            Initializes a new instance of the CodePatternEvent class.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="scope">The scope of the event.</param>
            <param name="delegateReference">A reference to the delegate type.</param>
            <param name="delegate">The declaration of the delegate to use.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternEvent.#ctor(System.String,DotNetZen.CodeDom.Scope,System.Type)">
            <summary>
            Initializes a new instance of the CodePatternEvent class.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="scope">The scope of the event.</param>
            <param name="delegate">The delegate type to use for the event.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternEvent.#ctor(System.String,DotNetZen.CodeDom.Scope,System.CodeDom.CodeTypeReference,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternEvent class.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="scope">The scope of the event.</param>
            <param name="delegateReference">A reference to the delegate type.</param>
            <param name="parameters">The delegate's parameters.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternEvent.Event">
            <summary>
            Gets the event declaration.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternEvent.Invoker">
            <summary>
            Gets the event invoking method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternEvent.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternBeginEndProcess">
             <summary>
             Represents the declaration of begin/end methods for a process, such as load, init, etc.
             </summary>
             <example>Output example:<code>
            	/// &lt;summary&gt;
            	/// See &lt;see cref="IsInInit" /&gt; for information about this field.
            	/// &lt;/summary&gt;
            	private int m_IsInInit;
            
            	/// &lt;summary&gt;
            	/// Begins the Init process.
            	/// &lt;/summary&gt;
            	public virtual void BeginInit()
            	{
            		this.m_IsInInit = (this.m_IsInInit + 1);
            	}
            
            	/// &lt;summary&gt;
            	/// Ends the Init process.
            	/// &lt;/summary&gt;
            	public virtual void EndInit()
            	{
            		if ((this.m_IsInInit != 0))
            		{
            			this.m_IsInInit = (this.m_IsInInit - 1);
            		}
            	}
            
            	/// &lt;summary&gt;
            	/// Gets whether the Init process has begun.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;Whether the init process has begun.&lt;/value&gt;
            	protected bool IsInInit()
            	{
            		return (this.m_IsInInit != 0);
            	}
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternBeginEndProcess.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CodePatternBeginEndProcess class.
            </summary>
            <param name="processName">The name of the process.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternBeginEndProcess.Begin">
            <summary>
            Gets the Begin[Process] method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternBeginEndProcess.End">
            <summary>
            Gets the End[Process] method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternBeginEndProcess.IsInProcess">
            <summary>
            Gets the IsIn[Process] method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternBeginEndProcess.IsInProcessFlag">
            <summary>
            Gets the flag that shows if we're in the process.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternBeginEndProcess.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection">
            <summary>
            Represents the declaration of a custom typed collection.
            </summary>
            <remarks>
            Please note: A bug in the .net frameworks up to (and not including) 2.0 does not allow for creation of parameter arrays,
            which means that the pattern is incomplete when used with these versions.
            </remarks>
            <example>Output example:<code>
            /// &lt;summary&gt;
            /// Represents a collection of &lt;see cref="Int32" /&gt; elements.
            /// &lt;/summary&gt;
            [System.SerializableAttribute()]
            public class Int32Collection : System.Collections.CollectionBase
            {
            	/// &lt;summary&gt;
            	/// See &lt;see cref="IsInLoad" /&gt; for information about this field.
            	/// &lt;/summary&gt;
            	private int m_IsInLoad;
                
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="Int32Collection" /&gt; class.
            	/// &lt;/summary&gt;
            	public Int32Collection()
            	{
            	}
                
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="Int32Collection" /&gt; class.
            	/// &lt;/summary&gt;
            	/// &lt;param name="values"&gt;A list of objects of type &lt;see cref="Int32" /&gt; to initialize the collection with.&lt;/param&gt;
            	public Int32Collection(params int[] values)
            	{
            		if ((values == null))
            		{
            			throw new System.ArgumentNullException("values");
            		}
            		this.InnerList.Capacity = values.Length;
            		this.BeginLoad();
            		try
            		{
            			this.AddRange(values);
            		}
            		finally
            		{
            			this.EndLoad();
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="Int32Collection" /&gt; class.
            	/// &lt;/summary&gt;
            	/// &lt;param name="collection"&gt;An object of type &lt;see cref="Int32Collection" /&gt; containing objects to be copied into the new collection.&lt;/param&gt;
            	public Int32Collection(Int32Collection collection)
            	{
            		if ((collection == null))
            		{
            			throw new System.ArgumentNullException("collection");
            		}
            		this.InnerList.Capacity = collection.Count;
            		this.BeginLoad();
            		try
            		{
            			this.AddRange(collection);
            		}
            		finally
            		{
            			this.EndLoad();
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Gets or sets the &lt;see cref="Int32" /&gt; at position &lt;paramref name="index" /&gt;.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;The &lt;see cref="Int32" /&gt; at position &lt;paramref name="index" /&gt;.&lt;/value&gt;
            	/// &lt;param name="index"&gt;The position of the &lt;see cref="Int32" /&gt;.&lt;/param&gt;
            	public int this[int index]
            	{
            		get
            		{
            			return ((int)(this.List[index]));
            		}
            		set
            		{
            			this.List[index] = value;
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Gets an object that can be used to synchronize access to the collection.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;An object that can be used to synchronize access to the collection.&lt;/value&gt;
            	public object SyncRoot
            	{
            		get
            		{
            			return this.List.SyncRoot;
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Occurs when the collection begins the process of removing all elements.
            	/// &lt;/summary&gt;
            	/// &lt;remarks&gt;To indicate that clearing the collection is not possible, throw an exception from an attached method.&lt;/remarks&gt;
            	public event System.EventHandler Clearing;
                
            	/// &lt;summary&gt;
            	/// Occurs after the collection completes the process of removing all elements.
            	/// &lt;/summary&gt;
            	public event System.EventHandler Cleared;
                
            	/// &lt;summary&gt;
            	/// Occurs when the collection begins the process of inserting an element.
            	/// &lt;/summary&gt;
            	/// &lt;remarks&gt;To indicate that inserting this element is invalid, throw an exception from an attached method. To indicate that the element is simply invalid, use the &lt;see cref="Validating" /&gt; event.&lt;/remarks&gt;
            	public event EventHandler Inserting;
                
            	/// &lt;summary&gt;
            	/// Occurs after the collection completes the process of inserting an element.
            	/// &lt;/summary&gt;
            	/// &lt;remarks&gt;To prevent the insertion from taking place, throw an exception from an attached method.&lt;/remarks&gt;
            	public event EventHandler Inserted;
                
            	/// &lt;summary&gt;
            	/// Occurs when the collection begins the process of removing an element.
            	/// &lt;/summary&gt;
            	/// &lt;remarks&gt;To indicate that removing this element is invalid, throw an exception from an attached method. To indicate that the element is simply invalid, use the &lt;see cref="Validating" /&gt; event.&lt;/remarks&gt;
            	public event EventHandler Removing;
                
            	/// &lt;summary&gt;
            	/// Occurs after the collection completes the process of removing an element.
            	/// &lt;/summary&gt;
            	/// &lt;remarks&gt;To prevent the removal from taking place, throw an exception from an attached method.&lt;/remarks&gt;
            	public event EventHandler Removed;
                
            	/// &lt;summary&gt;
            	/// Occurs when the collection begins the process of setting an element at a certain position.
            	/// &lt;/summary&gt;
            	/// &lt;remarks&gt;To indicate that setting this element at this position is invalid, throw an exception from an attached method. To indicate that the element is simply invalid, use the &lt;see cref="Validating" /&gt; event.&lt;/remarks&gt;
            	public event SetEventHandler Setting;
                
            	/// &lt;summary&gt;
            	/// Occurs after the collection completes the process of setting an element at a certain position.
            	/// &lt;/summary&gt;
            	/// &lt;remarks&gt;To prevent the settng action from taking place, throw an exception from an attached method.&lt;/remarks&gt;
            	public event SetEventHandler Set;
                
            	/// &lt;summary&gt;
            	/// Occurs when the collection asks for validation of an item that is to be added into it.
            	/// &lt;/summary&gt;
            	/// &lt;remarks&gt;If the item is invalid, throw an exception from an attached method.
            	/// Checks that already take place are that the value is not a null reference (Nothing in Visual Basic) and that it is of/derives from &lt;see cref="Int32" /&gt;.&lt;/remarks&gt;
            	public event ValidationEventHandler Validating;
                
            	/// &lt;summary&gt;
            	/// Begins the Load process.
            	/// &lt;/summary&gt;
            	public virtual void BeginLoad()
            	{
            		this.m_IsInLoad = (this.m_IsInLoad + 1);
            	}
                
            	/// &lt;summary&gt;
            	/// Ends the Load process.
            	/// &lt;/summary&gt;
            	public virtual void EndLoad()
            	{
            		if ((this.m_IsInLoad != 0))
            		{
            			this.m_IsInLoad = (this.m_IsInLoad - 1);
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Gets whether the Load process has begun.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;Whether the Load process has begun.&lt;/value&gt;
            	protected bool IsInLoad()
            	{
            		return (this.m_IsInLoad != 0);
            	}
                
            	/// &lt;summary&gt;
            	/// Inserts an element into the collection at the specified index.
            	/// &lt;/summary&gt;
            	/// &lt;param name="index"&gt;The zero-based index at which &lt;paramref name="value" /&gt; should be inserted.&lt;/param&gt;
            	/// &lt;param name="value"&gt;The &lt;see cref="Int32" /&gt; to insert.&lt;/param&gt;
            	/// &lt;exception cref="System.ArgumentOutOfRangeException"&gt;&lt;paramref name="index" /&gt; is less than zero or is greater than &lt;see cref="System.Collections.CollectionBase.Count" /&gt;.&lt;/exception&gt;
            	public void Insert(int index, int value)
            	{
            		this.List.Insert(index, value);
            	}
                
            	/// &lt;summary&gt;
            	/// Removes the first occurrence of a specific &lt;see cref="Int32" /&gt; from the collection.
            	/// &lt;/summary&gt;
            	/// &lt;param name="value"&gt;The &lt;see cref="Int32" /&gt; to remove from the collection.&lt;/param&gt;
            	public void Remove(int value)
            	{
            		this.List.Remove(value);
            	}
                
            	/// &lt;summary&gt;
            	/// Determines whether an element is in the collection.
            	/// &lt;/summary&gt;
            	/// &lt;param name="value"&gt;The &lt;see cref="Int32" /&gt; to locate in the collection.&lt;/param&gt;
            	/// &lt;returns&gt;true if &lt;paramref name="value" /&gt; is found in the collection; otherwise, false.&lt;/returns&gt;
            	public bool Contains(int value)
            	{
            		return this.List.Contains(value);
            	}
                
            	/// &lt;summary&gt;
            	/// Searches for the specified &lt;see cref="Int32" /&gt; and returns the zero-based index of the first occurrence within the entire collection.
            	/// &lt;/summary&gt;
            	/// &lt;param name="value"&gt;The &lt;see cref="Int32" /&gt; to locate in the collection.&lt;/param&gt;
            	/// &lt;returns&gt;The zero-based index of the first occurrence of &lt;paramref name="value" /&gt; within the entire collection, if found; otherwise, -1.&lt;/returns&gt;
            	public int IndexOf(int value)
            	{
            		return this.List.IndexOf(value);
            	}
                
            	/// &lt;summary&gt;
            	/// Adds an object to the end of the collection.
            	/// &lt;/summary&gt;
            	/// &lt;param name="value"&gt;The &lt;see cref="Int32" /&gt; to be added to the end of the collection.&lt;/param&gt;
            	/// &lt;returns&gt;The collection index at which the &lt;paramref name="value" /&gt; has been added.&lt;/returns&gt;
            	public int Add(int value)
            	{
            		return this.List.Add(value);
            	}
                
            	/// &lt;summary&gt;
            	/// Adds the elements of an array to the end of the collection.
            	/// &lt;/summary&gt;
            	/// &lt;param name="values"&gt;The array whose elements should be added to the end of the collection.&lt;/param&gt;
            	/// &lt;exception cref="System.ArgumentNullException"&gt;&lt;paramref name="values" /&gt; is a null reference (Nothing in Visual Basic).&lt;/exception&gt;
            	public void AddRange(int[] values)
            	{
            		if ((values == null))
            		{
            			throw new System.ArgumentNullException("values");
            		}
            		System.Collections.IEnumerator enumerator0 = ((System.Collections.IEnumerable)(values)).GetEnumerator();
            		try
            		{
            			for (
            				; (enumerator0.MoveNext() == true); 
            				)
            			{
            				int element0 = ((int)(enumerator0.Current));
            				this.List.Add(element0);
            			}
            		}
            		finally
            		{
            			if (((enumerator0 != null) 
            				&amp;&amp; enumerator0.GetType().IsInstanceOfType(typeof(System.IDisposable))))
            			{
            				((System.IDisposable)(enumerator0)).Dispose();
            			}
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Adds the elements of a collection to the end of the collection.
            	/// &lt;/summary&gt;
            	/// &lt;param name="collection"&gt;The collection whose elements should be added to the end of the collection.&lt;/param&gt;
            	/// &lt;exception cref="System.ArgumentNullException"&gt;&lt;paramref name="collection" /&gt; is a null reference (Nothing in Visual Basic).&lt;/exception&gt;
            	public void AddRange(Int32Collection collection)
            	{
            		if ((collection == null))
            		{
            			throw new System.ArgumentNullException("collection");
            		}
            		System.Collections.IEnumerator enumerator1 = ((System.Collections.IEnumerable)(collection.InnerList)).GetEnumerator();
            		try
            		{
            			for (
            				; (enumerator1.MoveNext() == true); 
            				)
            			{
            				int element1 = ((int)(enumerator1.Current));
            				this.List.Add(element1);
            			}
            		}
            		finally
            		{
            			if (((enumerator1 != null) 
            				&amp;&amp; enumerator1.GetType().IsInstanceOfType(typeof(System.IDisposable))))
            			{
            				((System.IDisposable)(enumerator1)).Dispose();
            			}
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Copies the entire collection to a compatible one-dimensional &lt;see cref="System.Array" /&gt;, starting at the specified &lt;paramref name="index" /&gt; of the target array.
            	/// &lt;/summary&gt;
            	/// &lt;param name="array"&gt;The one-dimensional &lt;see cref="System.Array" /&gt; that is the destination of the elements copied from collection. The &lt;see cref="System.Array" /&gt; must have zero-based indexing.&lt;/param&gt;
            	/// &lt;param name="index"&gt;The zero-based index in &lt;paramref name="array" /&gt; at which copying begins.&lt;/param&gt;
            	/// &lt;exception cref="System.ArgumentNullException"&gt;&lt;paramref name="array" /&gt; is a null reference (Nothing in Visual Basic).&lt;/exception&gt;
            	/// &lt;exception cref="System.ArgumentOutOfRangeException"&gt;&lt;paramref name="index" /&gt; is less than zero.&lt;/exception&gt;
            	/// &lt;exception cref="System.ArgumentException"&gt;&lt;paramref name="array" /&gt; is multidimensional.&lt;/exception&gt;
            	/// &lt;exception cref="System.ArgumentException"&gt;&lt;paramref name="index" /&gt; is equal to or greater than the length of &lt;paramref name="array" /&gt;.&lt;/exception&gt;
            	/// &lt;exception cref="System.ArgumentException"&gt;The number of elements in the source collection is greater than the available space from &lt;paramref name="index" /&gt; to the end of the destination &lt;paramref name="array" /&gt;.&lt;/exception&gt;
            	/// &lt;remarks&gt;The specified array's elements must be of type &lt;see cref="Int32" /&gt; or any of its derivatives.&lt;/remarks&gt;
            	public void CopyTo(System.Array array, int index)
            	{
            		this.List.CopyTo(array, index);
            	}
                
            	/// &lt;summary&gt;
            	/// Copies the elements of the collection to a new &lt;see cref="Int32" /&gt; array.
            	/// &lt;/summary&gt;
            	/// &lt;returns&gt;An array of &lt;see cref="Int32" /&gt; containing copies of the elements of the collection.&lt;/returns&gt;
            	public int[] ToArray()
            	{
            		return ((int[])(this.InnerList.ToArray(typeof(Int32))));
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Clearing" /&gt; event.
            	/// &lt;/summary&gt;
            	protected override void OnClear()
            	{
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Clearing != null)))
            		{
            			this.Clearing(this, System.EventArgs.Empty);
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Cleared" /&gt; event.
            	/// &lt;/summary&gt;
            	protected override void OnClearComplete()
            	{
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Cleared != null)))
            		{
            			this.Cleared(this, System.EventArgs.Empty);
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Inserting" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="index"&gt;The zero-based index at which to insert &lt;paramref name="value" /&gt;.&lt;/param&gt;
            	/// &lt;param name="value"&gt;The new value of the element at &lt;paramref name="index" /&gt;.&lt;/param&gt;
            	protected override void OnInsert(int index, object value)
            	{
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Inserting != null)))
            		{
            			this.Inserting(this, new EventArgs(index, ((int)(value))));
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Inserted" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="index"&gt;The zero-based index at which to insert &lt;paramref name="value" /&gt;.&lt;/param&gt;
            	/// &lt;param name="value"&gt;The new value of the element at &lt;paramref name="index" /&gt;.&lt;/param&gt;
            	protected override void OnInsertComplete(int index, object value)
            	{
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Inserted != null)))
            		{
            			this.Inserted(this, new EventArgs(index, ((int)(value))));
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Removing" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="index"&gt;The zero-based index at which &lt;paramref name="value" /&gt; can be found.&lt;/param&gt;
            	/// &lt;param name="value"&gt;The value of the element to remove from &lt;paramref name="index" /&gt;.&lt;/param&gt;
            	protected override void OnRemove(int index, object value)
            	{
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Removing != null)))
            		{
            			this.Removing(this, new EventArgs(index, ((int)(value))));
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Removed" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="index"&gt;The zero-based index at which &lt;paramref name="value" /&gt; can be found.&lt;/param&gt;
            	/// &lt;param name="value"&gt;The value of the element to remove from &lt;paramref name="index" /&gt;.&lt;/param&gt;
            	protected override void OnRemoveComplete(int index, object value)
            	{
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Removed != null)))
            		{
            			this.Removed(this, new EventArgs(index, ((int)(value))));
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Setting" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="index"&gt;The zero-based index at which &lt;paramref name="oldValue" /&gt; can be found.&lt;/param&gt;
            	/// &lt;param name="oldValue"&gt;The value to replace with &lt;paramref name="newValue" /&gt;.&lt;/param&gt;
            	/// &lt;param name="newValue"&gt;The new value of the element at &lt;paramref name="index" /&gt;.&lt;/param&gt;
            	protected override void OnSet(int index, object oldValue, object newValue)
            	{
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Setting != null)))
            		{
            			this.Setting(this, new SetEventArgs(index, ((int)(oldValue)), ((int)(newValue))));
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Set" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="index"&gt;The zero-based index at which &lt;paramref name="oldValue" /&gt; can be found.&lt;/param&gt;
            	/// &lt;param name="oldValue"&gt;The value to replace with &lt;paramref name="newValue" /&gt;.&lt;/param&gt;
            	/// &lt;param name="newValue"&gt;The new value of the element at &lt;paramref name="index" /&gt;.&lt;/param&gt;
            	protected override void OnSetComplete(int index, object oldValue, object newValue)
            	{
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Set != null)))
            		{
            			this.Set(this, new SetEventArgs(index, ((int)(oldValue)), ((int)(newValue))));
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="Validating" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="value"&gt;The object to validate.&lt;/param&gt;
            	protected override void OnValidate(object value)
            	{
            		base.OnValidate(value);
            		if ((value.GetType().IsInstanceOfType(typeof(int)) == false))
            		{
            			throw new System.ArgumentException(string.Format("The argument value must be of type {0}.", typeof(int).FullName), "value");
            		}
            		if (((this.IsInLoad() == false) 
            			&amp;&amp; (this.Validating != null)))
            		{
            			this.Validating(this, new ValidationEventArgs(((int)(value))));
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Represents a method that takes a &lt;see cref="System.Object" /&gt; and &lt;see cref="EventArgs" /&gt;.
            	/// &lt;/summary&gt;
            	/// &lt;param name="sender"&gt;The event's originating object.&lt;/param&gt;
            	/// &lt;param name="e"&gt;The event's arguments.&lt;/param&gt;
            	public delegate void EventHandler(object sender, EventArgs e);
                
            	/// &lt;summary&gt;
            	/// Contains the arguments for events based on the &lt;see cref="EventHandler" /&gt; delegate.
            	/// &lt;/summary&gt;
            	public class EventArgs : System.EventArgs
            	{
            		/// &lt;summary&gt;
            		/// Value for the property &lt;see cref="Index" /&gt;.
            		/// &lt;/summary&gt;
            		private int m_Index;
                    
            		/// &lt;summary&gt;
            		/// Value for the property &lt;see cref="Value" /&gt;.
            		/// &lt;/summary&gt;
            		private int m_Value;
                    
            		/// &lt;summary&gt;
            		/// Initializes a new instance of the &lt;see cref="EventArgs" /&gt; class.
            		/// &lt;/summary&gt;
            		/// &lt;param name="Index"&gt;The index of the value.&lt;/param&gt;
            		/// &lt;param name="Value"&gt;The value raised by the event.&lt;/param&gt;
            		public EventArgs(int Index, int Value)
            		{
            			this.m_Index = Index;
            			this.m_Value = Value;
            		}
                    
            		/// &lt;summary&gt;
            		/// Gets the index of the value.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The index of the value.&lt;/value&gt;
            		public virtual int Index
            		{
            			get
            			{
            				return this.m_Index;
            			}
            		}
                    
            		/// &lt;summary&gt;
            		/// Gets the value raised by the event.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The value raised by the event.&lt;/value&gt;
            		public virtual int Value
            		{
            			get
            			{
            				return this.m_Value;
            			}
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Represents a method that takes a &lt;see cref="System.Object" /&gt; and &lt;see cref="SetEventArgs" /&gt;.
            	/// &lt;/summary&gt;
            	/// &lt;param name="sender"&gt;The event's originating object.&lt;/param&gt;
            	/// &lt;param name="e"&gt;The event's arguments.&lt;/param&gt;
            	public delegate void SetEventHandler(object sender, SetEventArgs e);
                
            	/// &lt;summary&gt;
            	/// Contains the arguments for events based on the &lt;see cref="SetEventHandler" /&gt; delegate.
            	/// &lt;/summary&gt;
            	public class SetEventArgs : System.EventArgs
            	{
            		/// &lt;summary&gt;
            		/// Value for the property &lt;see cref="Index" /&gt;.
            		/// &lt;/summary&gt;
            		private int m_Index;
                    
            		/// &lt;summary&gt;
            		/// Value for the property &lt;see cref="OldValue" /&gt;.
            		/// &lt;/summary&gt;
            		private int m_OldValue;
                    
            		/// &lt;summary&gt;
            		/// Value for the property &lt;see cref="NewValue" /&gt;.
            		/// &lt;/summary&gt;
            		private int m_NewValue;
                    
            		/// &lt;summary&gt;
            		/// Initializes a new instance of the &lt;see cref="SetEventArgs" /&gt; class.
            		/// &lt;/summary&gt;
            		/// &lt;param name="Index"&gt;The zero-based index at which oldValue can be found.&lt;/param&gt;
            		/// &lt;param name="OldValue"&gt;The value to replace with newValue.&lt;/param&gt;
            		/// &lt;param name="NewValue"&gt;The new value of the element at index.&lt;/param&gt;
            		public SetEventArgs(int Index, int OldValue, int NewValue)
            		{
            			this.m_Index = Index;
            			this.m_OldValue = OldValue;
            			this.m_NewValue = NewValue;
            		}
                    
            		/// &lt;summary&gt;
            		/// Gets the zero-based index at which oldValue can be found.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The zero-based index at which oldValue can be found.&lt;/value&gt;
            		public virtual int Index
            		{
            			get
            			{
            				return this.m_Index;
            			}
            		}
                    
            		/// &lt;summary&gt;
            		/// Gets the value to replace with newValue.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The value to replace with newValue.&lt;/value&gt;
            		public virtual int OldValue
            		{
            			get
            			{
            				return this.m_OldValue;
            			}
            		}
                    
            		/// &lt;summary&gt;
            		/// Gets the new value of the element at index.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The new value of the element at index.&lt;/value&gt;
            		public virtual int NewValue
            		{
            			get
            			{
            				return this.m_NewValue;
            			}
            		}
            	}
                
            	/// &lt;summary&gt;
            	/// Represents a method that takes a &lt;see cref="System.Object" /&gt; and &lt;see cref="ValidationEventArgs" /&gt;.
            	/// &lt;/summary&gt;
            	/// &lt;param name="sender"&gt;The event's originating object.&lt;/param&gt;
            	/// &lt;param name="e"&gt;The event's arguments.&lt;/param&gt;
            	public delegate void ValidationEventHandler(object sender, ValidationEventArgs e);
                
            	/// &lt;summary&gt;
            	/// Contains the arguments for events based on the &lt;see cref="ValidationEventHandler" /&gt; delegate.
            	/// &lt;/summary&gt;
            	public class ValidationEventArgs : System.EventArgs
            	{
            		/// &lt;summary&gt;
            		/// Value for the property &lt;see cref="Value" /&gt;.
            		/// &lt;/summary&gt;
            		private int m_Value;
                    
            		/// &lt;summary&gt;
            		/// Initializes a new instance of the &lt;see cref="ValidationEventArgs" /&gt; class.
            		/// &lt;/summary&gt;
            		/// &lt;param name="Value"&gt;The value to be validated.&lt;/param&gt;
            		public ValidationEventArgs(int Value)
            		{
            			this.m_Value = Value;
            		}
                    
            		/// &lt;summary&gt;
            		/// Gets the value to be validated.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The value to be validated.&lt;/value&gt;
            		public virtual int Value
            		{
            			get
            			{
            				return this.m_Value;
            			}
            		}
            	}
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.#ctor(System.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the CodePatternTypedCollection class.
            </summary>
            <param name="type">The type of the instance to be stored in the collection.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the CodePatternTypedCollection class.
            </summary>
            <param name="type">The type of the instance to be stored in the collection.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CodePatternTypedCollection class.
            </summary>
            <param name="type">The type of the instance to be stored in the collection.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.#ctor(System.CodeDom.CodeTypeReference,DotNetZen.CodeDom.CollectionEvents)">
            <summary>
            Initializes a new instance of the CodePatternTypedCollection class.
            </summary>
            <param name="type">The type of the instance to be stored in the collection.</param>
            <param name="events">The events that the type will expose.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.#ctor(System.Type,DotNetZen.CodeDom.CollectionEvents)">
            <summary>
            Initializes a new instance of the CodePatternTypedCollection class.
            </summary>
            <param name="type">The type of the instance to be stored in the collection.</param>
            <param name="events">The events that the type will expose.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.#ctor(System.String,DotNetZen.CodeDom.CollectionEvents)">
            <summary>
            Initializes a new instance of the CodePatternTypedCollection class.
            </summary>
            <param name="type">The type of the instance to be stored in the collection.</param>
            <param name="events">The events that the type will expose.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.ParameterlessConstructor">
            <summary>
            Gets the parameterless constructor.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.ArrayConstructor">
            <summary>
            Gets the constructor that takes an array of the type.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.CollectionConstructor">
            <summary>
            Gets the copy constructor.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Indexer">
            <summary>
            Gets the collection's indexer.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Insert">
            <summary>
            Gets the Insert method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Remove">
            <summary>
            Gets the Remove method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Contains">
            <summary>
            Gets the Contains method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.IndexOf">
            <summary>
            Gets the IndexOf method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Add">
            <summary>
            Gets the Add method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.AddRangeArray">
            <summary>
            Gets the AddRange method that takes an array.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.AddRangeCollection">
            <summary>
            Gets the AddRange method that takes a collection.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.CopyTo">
            <summary>
            Gets the CopyTo method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.SyncRoot">
            <summary>
            Gets the SyncRoot property.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.ToArray">
            <summary>
            Gets the ToArray method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.BeginEndLoad">
            <summary>
            Gets the Begin/End pattern for loading.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.EventHandler">
            <summary>
            Gets the EventHandler delegate used in the insertion and removal events.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.SetEventHandler">
            <summary>
            Gets the SetEventHandler delegate used in the Setting and Set events.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.ValidationEventHandler">
            <summary>
            Gets the ValidationEventHandler delegate used in the Validating event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Clearing">
            <summary>
            Gets the Clearing event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Cleared">
            <summary>
            Gets the Cleared event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Inserting">
            <summary>
            Gets the Inserting event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Inserted">
            <summary>
            Gets the Inserted event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Removing">
            <summary>
            Gets the Removing event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Removed">
            <summary>
            Gets the Removed event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Setting">
            <summary>
            Gets the Setting event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Set">
            <summary>
            Gets the Set event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.Validating">
            <summary>
            Gets the Validating event.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnClearing">
            <summary>
            Gets the OnClearing event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnCleared">
            <summary>
            Gets the OnCleared event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnInserting">
            <summary>
            Gets the OnInserting event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnInserted">
            <summary>
            Gets the OnInserted event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnRemoving">
            <summary>
            Gets the OnRemoving event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnRemoved">
            <summary>
            Gets the OnRemoved event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnSetting">
            <summary>
            Gets the OnSetting event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnSet">
            <summary>
            Gets the OnSet event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.OnValidating">
            <summary>
            Gets the OnValidating event raising method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternTypedCollection.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration">
            <summary>
            Represents the declaration of a custom attribute.
            </summary>
            <example>Output example:<code>
            [System.AttributeUsageAttribute(((System.AttributeTargets.Enum | System.AttributeTargets.Struct) 
            	 | System.AttributeTargets.Class), AllowMultiple=false, Inherited=true)]
            public sealed class CoolMetaDataAttribute : System.Attribute
            {
            	/// &lt;summary&gt;
            	/// Value for the property &lt;see cref="MetaData" /&gt;.
            	/// &lt;/summary&gt;
            	private int m_MetaData;
               
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="CoolMetaDataAttribute" /&gt; class.
            	/// &lt;/summary&gt;
            	public CoolMetaDataAttribute()
            	{
            	}
               
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="CoolMetaDataAttribute" /&gt; class.
            	/// &lt;/summary&gt;
            	/// &lt;param name="MetaData"&gt;The metadata for the attribute.&lt;/param&gt;
            	public CoolMetaDataAttribute(int MetaData)
            	{
            		this.m_MetaData = MetaData;
            	}
               
            	/// &lt;summary&gt;
            	/// Gets the metadata for the attribute.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;The metadata for the attribute.&lt;/value&gt;
            	public int MetaData
            	{
            		get
            		{
            			return this.m_MetaData;
            		}
            	}
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration.#ctor(System.String,System.AttributeTargets,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternCustomAttributeDeclaration class.
            </summary>
            <param name="name">The name of the attribute sans the Attribute suffix.</param>
            <param name="attributeUsage">Specifies the application elements on which it is valid to apply the attribute.</param>
            <param name="parameters">The parameters to the attribute's constructor.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration.#ctor(System.String,System.AttributeTargets,System.Boolean,System.Boolean,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternCustomAttributeDeclaration class.
            </summary>
            <param name="name">The name of the attribute sans the Attribute suffix.</param>
            <param name="attributeUsage">Specifies the application elements on which it is valid to apply the attribute.</param>
            <param name="allowMultiple">true if the indicated attribute can be specified more than once for a given program element; otherwise, false.</param>
            <param name="inherited">true if the indicated attribute can be inherited by derived classes and overriding members; otherwise, false.</param>
            <param name="parameters">The parameters to the attribute's constructor.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration.SetComment(System.String,System.String)">
            <summary>
            Sets the comment for a property of the attribute.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="comment">The comment for the parameter.</param>
            <exception cref="T:System.NotSupportedException">Thrown when the property does not exist.</exception>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration.AttributeUsage">
            <summary>
            Gets or sets the attribute's usage targets.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration.DefaultConstructor">
            <summary>
            Gets the default, parameterless, public constructor.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration.ParameterizedConstructor">
            <summary>
            Gets the public constructor that initializes all parameters.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration.Fields">
            <summary>
            Gets the list of fields of this attribute.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomAttributeDeclaration.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.TypePatterns">
            <summary>
            Designates the patterns applied to a certain type.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.TypePatterns.None">
            <summary>
            Indicates no patterns applied.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.TypePatterns.Disposable">
            <summary>
            Indicates that the disposable type pattern is applied.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.TypePatterns.Serializable">
            <summary>
            Indicates that the serializable type pattern is applied.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.DisposeImplementationType">
            <summary>
            Designates the level of the dispose pattern to be applied to a type.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.DisposeImplementationType.New">
            <summary>
            Indicates that this is the first type in the hierarchy to implement the dispose pattern.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.DisposeImplementationType.Inherited">
            <summary>
            Indicates that the dispose pattern has already been implemented higher up in the hierarchy.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.SerializationType">
            <summary>
            Designates the type of serialization applied to a type.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.SerializationType.Basic">
            <summary>
            Indicates basic serialization.
            All fields are serialized.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.SerializationType.Selective">
            <summary>
            Indicates selective serialization.
            When the <see cref="M:DotNetZen.CodeDom.Patterns.CodePatternTypeDeclaration.ApplySerializablePattern(DotNetZen.CodeDom.Patterns.SerializationType)"/> method is called, fields not in the fieldsToSerialize parameter
            are marked with the <see cref="T:System.NonSerializedAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.SerializationType.NewCustom">
            <summary>
            Indicates custom serialization that was not derived from a parent.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.SerializationType.InheritedCustom">
            <summary>
            Indicates custom serialization when custom serialization was inherited from a parent.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternUsing">
            <summary>
            Represents the expansion of C#'s using keyword.
            </summary>
            <example>Output example:<code>
            System.IDisposable kek;
            
            try
            {
            	// ...
            }
            finally
            {
            	if ((kek != null))
            	{
            		((System.IDisposable)(kek)).Dispose();
            	}
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternUsing.#ctor(System.CodeDom.CodeExpression,DotNetZen.CodeDom.ResourceType,System.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the CodePatternUsing class.
            </summary>
            <param name="usedExpression">The expression to use.</param>
            <param name="resourceType">The type category of the resource used.</param>
            <param name="statements">The statements in the using block.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternUsing.#ctor(System.CodeDom.CodeVariableDeclarationStatement,DotNetZen.CodeDom.ResourceType,System.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the CodePatternUsing class.
            </summary>
            <param name="usedVariable">The variable to use.</param>
            <param name="resourceType">The type category of the resource used.</param>
            <param name="statements">The statements in the using block.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternUsing.Statements">
            <summary>
            The statements in the using block.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute">
            <summary>
            Represents the decoration of a member with a Code Access Security attribute.
            </summary>
            <example>Output example:<code>
            [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.Demand,
                Clipboard=System.Security.Permissions.UIPermissionClipboard.AllClipboard)]
            private void MyMethod()
            {
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute.#ctor(DotNetZen.CodeDom.Patterns.Permissions.Permission)">
            <summary>
            Initializes a new instance of the CodePatternCasAttribute class.
            </summary>
            <param name="permission">The type of permission demanded.</param>
            <remarks><see cref="P:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute.Action"/> defaults to <see cref="F:System.Security.Permissions.SecurityAction.Demand"/>. <see cref="P:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute.Unrestricted"/> defaults to false.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute.#ctor(System.Security.Permissions.SecurityAction,DotNetZen.CodeDom.Patterns.Permissions.Permission)">
            <summary>
            Initializes a new instance of the CodePatternCasAttribute class.
            </summary>
            <param name="permission">The type of permission demanded.</param>
            <param name="action">The action taken.</param>
            <remarks><see cref="P:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute.Unrestricted"/> defaults to false.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute.#ctor(System.Security.Permissions.SecurityAction,System.Boolean,DotNetZen.CodeDom.Patterns.Permissions.Permission)">
            <summary>
            Initializes a new instance of the CodePatternCasAttribute class.
            </summary>
            <param name="permission">The type of permission demanded.</param>
            <param name="action">The action taken.</param>
            <param name="unrestricted">A value indicating whether full (unrestricted) permission to the resource protected by the attribute is declared.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute.Action">
            <summary>
            Gets a security action.
            </summary>
            <value>One of the <see cref="T:System.Security.Permissions.SecurityAction"/> values.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCasAttribute.Unrestricted">
            <summary>
            Sets a value indicating whether full (unrestricted) permission to the resource protected by the attribute is declared.
            </summary>
            <value>true if full permission to the protected resource is declared; otherwise, false.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Permission">
            <summary>
            Base type for permission attribute builders.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.Permissions.Permission.#ctor">
            <summary>
            Initializes a new instance of the Permission class.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.Permissions.Permission.SetArgument(System.String,System.Object)">
            <summary>
            Sets an argument of the attribute.
            </summary>
            <param name="name">The name of the argument.</param>
            <param name="value">The constant literal value (string literal, enum member, etc.) of the argument.</param>
            <remarks>This should be called by implementing builders to add named arguments.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.Permissions.Permission.Apply(System.CodeDom.CodeAttributeDeclaration)">
            <summary>
            Applies arguments to the attribute.
            </summary>
            <param name="attribute">An instance of the attribute when building.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Permission.Type">
            <summary>
            Gets the type of the attribute that will be generated.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Configuration">
            <summary>
            Builds a <see cref="T:System.Configuration.ConfigurationPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Configuration.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Configuration"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Configuration.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Dns">
            <summary>
            Builds a <see cref="T:System.Net.DnsPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Dns.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Dns"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Dns.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.GacIdentity">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.GacIdentityPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.GacIdentity.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.GacIdentity"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.GacIdentity.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.DistributedTransaction">
            <summary>
            Builds a <see cref="T:System.Transactions.DistributedTransactionPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.DistributedTransaction.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.DistributedTransaction"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DistributedTransaction.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.DBData">
            <summary>
            Builds a <see cref="T:System.Data.Common.DBDataPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.DBData.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.DBData"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DBData.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DBData.AllowBlankPassword">
            <summary>
            Sets the value to be placed in <see cref="P:System.Data.Common.DBDataPermissionAttribute.AllowBlankPassword"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DBData.ConnectionString">
            <summary>
            Sets the value to be placed in <see cref="P:System.Data.Common.DBDataPermissionAttribute.ConnectionString"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DBData.KeyRestrictionBehavior">
            <summary>
            Sets the value to be placed in <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictionBehavior"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DBData.KeyRestrictions">
            <summary>
            Sets the value to be placed in <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.EventLog">
            <summary>
            Builds a <see cref="T:System.Diagnostics.EventLogPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.EventLog.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.EventLog"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.EventLog.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.EventLog.MachineName">
            <summary>
            Sets the value to be placed in <see cref="P:System.Diagnostics.EventLogPermissionAttribute.MachineName"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.EventLog.PermissionAccess">
            <summary>
            Sets the value to be placed in <see cref="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.PerformanceCounter">
            <summary>
            Builds a <see cref="T:System.Diagnostics.PerformanceCounterPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.PerformanceCounter.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.PerformanceCounter"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PerformanceCounter.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PerformanceCounter.CategoryName">
            <summary>
            Sets the value to be placed in <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.CategoryName"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PerformanceCounter.MachineName">
            <summary>
            Sets the value to be placed in <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PerformanceCounter.PermissionAccess">
            <summary>
            Sets the value to be placed in <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.DirectoryServices">
            <summary>
            Builds a <see cref="T:System.DirectoryServices.DirectoryServicesPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.DirectoryServices.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.DirectoryServices"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DirectoryServices.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DirectoryServices.Path">
            <summary>
            Sets the value to be placed in <see cref="P:System.DirectoryServices.DirectoryServicesPermissionAttribute.Path"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DirectoryServices.PermissionAccess">
            <summary>
            Sets the value to be placed in <see cref="P:System.DirectoryServices.DirectoryServicesPermissionAttribute.PermissionAccess"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Printing">
            <summary>
            Builds a <see cref="T:System.Drawing.Printing.PrintingPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Printing.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Printing"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Printing.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Printing.Level">
            <summary>
            Sets the value to be placed in <see cref="P:System.Drawing.Printing.PrintingPermissionAttribute.Level"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue">
            <summary>
            Builds a <see cref="T:System.Messaging.MessageQueuePermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue.Category">
            <summary>
            Sets the value to be placed in <see cref="P:System.Messaging.MessageQueuePermissionAttribute.Category"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue.Label">
            <summary>
            Sets the value to be placed in <see cref="P:System.Messaging.MessageQueuePermissionAttribute.Label"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue.MachineName">
            <summary>
            Sets the value to be placed in <see cref="P:System.Messaging.MessageQueuePermissionAttribute.MachineName"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue.Path">
            <summary>
            Sets the value to be placed in <see cref="P:System.Messaging.MessageQueuePermissionAttribute.Path"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.MessageQueue.PermissionAccess">
            <summary>
            Sets the value to be placed in <see cref="P:System.Messaging.MessageQueuePermissionAttribute.PermissionAccess"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Smtp">
            <summary>
            Builds a <see cref="T:System.Net.Mail.SmtpPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Smtp.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Smtp"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Smtp.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Smtp.Access">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.Mail.SmtpPermissionAttribute.Access"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.NetworkInformation">
            <summary>
            Builds a <see cref="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.NetworkInformation.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.NetworkInformation"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.NetworkInformation.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.NetworkInformation.Access">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.Access"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Socket">
            <summary>
            Builds a <see cref="T:System.Net.SocketPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Socket.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Socket"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Socket.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Socket.Access">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.SocketPermissionAttribute.Access"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Socket.Host">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.SocketPermissionAttribute.Host"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Socket.Transport">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.SocketPermissionAttribute.Transport"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Socket.Port">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.SocketPermissionAttribute.Port"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Web">
            <summary>
            Builds a <see cref="T:System.Net.WebPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Web.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Web"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Web.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Web.Connect">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.WebPermissionAttribute.Connect"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Web.Accept">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.WebPermissionAttribute.Accept"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Web.ConnectPattern">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.WebPermissionAttribute.ConnectPattern"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Web.AcceptPattern">
            <summary>
            Sets the value to be placed in <see cref="P:System.Net.WebPermissionAttribute.AcceptPattern"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.DataProtection">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.DataProtectionPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.DataProtection.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.DataProtection"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DataProtection.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DataProtection.Flags">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.DataProtectionPermissionAttribute.Flags"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DataProtection.ProtectData">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.DataProtectionPermissionAttribute.ProtectData"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DataProtection.UnprotectData">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.DataProtectionPermissionAttribute.UnprotectData"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DataProtection.ProtectMemory">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.DataProtectionPermissionAttribute.ProtectMemory"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.DataProtection.UnprotectMemory">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.DataProtectionPermissionAttribute.UnprotectMemory"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Environment">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.EnvironmentPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Environment.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Environment"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Environment.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Environment.Read">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.EnvironmentPermissionAttribute.Read"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Environment.Write">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.EnvironmentPermissionAttribute.Write"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Environment.All">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.EnvironmentPermissionAttribute.All"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.FileDialog">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.FileDialogPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.FileDialog.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.FileDialog"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileDialog.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileDialog.Open">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileDialogPermissionAttribute.Open"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileDialog.Save">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileDialogPermissionAttribute.Save"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.FileIO">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.FileIOPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.FileIO.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.FileIO"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.Read">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.Read"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.Write">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.Write"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.Append">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.Append"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.PathDiscovery">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.ViewAccessControl">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.ChangeAccessControl">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.All">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.All"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.ViewAndModify">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.AllFiles">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.AllFiles"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.FileIO.AllLocalFiles">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.HostProtection">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.HostProtectionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.HostProtection"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.Resources">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.Resources"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.Synchronization">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.Synchronization"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.SharedState">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.SharedState"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.ExternalProcessMgmt">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.SelfAffectingProcessMgmt">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.ExternalThreading">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.ExternalThreading"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.SelfAffectingThreading">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.SecurityInfrastructure">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.UI">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.UI"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.HostProtection.MayLeakOnAbort">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.IsolatedStorage">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.IsolatedStoragePermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.IsolatedStorage.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.IsolatedStorage"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.IsolatedStorage.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.IsolatedStorage.UserQuota">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.IsolatedStoragePermissionAttribute.UserQuota"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.IsolatedStorage.UsageAllowed">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.IsolatedStoragePermissionAttribute.UsageAllowed"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.KeyContainerPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer.KeyStore">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer.ProviderName">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer.ProviderType">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer.KeyContainerName">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer.KeySpec">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.KeyContainer.Flags">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.KeyContainerPermissionAttribute.Flags"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.PermissionSetAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet.File">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PermissionSetAttribute.File"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet.UnicodeEncoded">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet.Name">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PermissionSetAttribute.Name"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet.XML">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PermissionSetAttribute.XML"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PermissionSet.Hex">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PermissionSetAttribute.Hex"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Principal">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Principal.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Principal"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Principal.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Principal.Name">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PrincipalPermissionAttribute.Name"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Principal.Role">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PrincipalPermissionAttribute.Role"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Principal.Authenticated">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.PublisherIdentity">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.PublisherIdentityPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.PublisherIdentity.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.PublisherIdentity"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PublisherIdentity.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PublisherIdentity.X509Certificate">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PublisherIdentity.CertFile">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.PublisherIdentity.SignedFile">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Reflection">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.ReflectionPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Reflection.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Reflection"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Reflection.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Reflection.Flags">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.ReflectionPermissionAttribute.Flags"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Reflection.TypeInformation">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Reflection.MemberAccess">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Reflection.ReflectionEmit">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Registry">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.RegistryPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Registry.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Registry"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Registry.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Registry.Read">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.RegistryPermissionAttribute.Read"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Registry.Write">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.RegistryPermissionAttribute.Write"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Registry.Create">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.RegistryPermissionAttribute.Create"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Registry.ViewAccessControl">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Registry.ChangeAccessControl">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Registry.ViewAndModify">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Registry.All">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.RegistryPermissionAttribute.All"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Security">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.SecurityPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Security.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Security"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.Flags">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.Flags"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.Assertion">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.UnmanagedCode">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.SkipVerification">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.Execution">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.Execution"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.ControlThread">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.ControlEvidence">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.ControlPolicy">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.SerializationFormatter">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.ControlDomainPolicy">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.ControlPrincipal">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.ControlAppDomain">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.RemotingConfiguration">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.Infrastructure">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Security.BindingRedirects">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.SiteIdentity">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.SiteIdentityPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.SiteIdentity.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.SiteIdentity"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.SiteIdentity.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.SiteIdentity.Site">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.SiteIdentityPermissionAttribute.Site"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.Store">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.StorePermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.Store.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Store"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.Flags">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StorePermissionAttribute.Flags"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.CreateStore">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StorePermissionAttribute.CreateStore"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.DeleteStore">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StorePermissionAttribute.DeleteStore"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.EnumerateStores">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StorePermissionAttribute.EnumerateStores"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.OpenStore">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StorePermissionAttribute.OpenStore"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.AddToStore">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StorePermissionAttribute.AddToStore"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.RemoveFromStore">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StorePermissionAttribute.RemoveFromStore"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.Store.EnumerateCertificates">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StorePermissionAttribute.EnumerateCertificates"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.StrongNameIdentity">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.StrongNameIdentityPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.StrongNameIdentity.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.StrongNameIdentity"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.StrongNameIdentity.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.StrongNameIdentity.Name">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.Name"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.StrongNameIdentity.Version">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.Version"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.StrongNameIdentity.PublicKey">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.PublicKey"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.UI">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.UIPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.UI.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.UI"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.UI.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.UI.Window">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.UIPermissionAttribute.Window"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.UI.Clipboard">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.UIPermissionAttribute.Clipboard"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.UrlIdentity">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.UrlIdentityPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.UrlIdentity.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.UrlIdentity"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.UrlIdentity.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.UrlIdentity.Url">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.UrlIdentityPermissionAttribute.Url"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.ZoneIdentity">
            <summary>
            Builds a <see cref="T:System.Security.Permissions.ZoneIdentityPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.ZoneIdentity.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.ZoneIdentity"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.ZoneIdentity.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.ZoneIdentity.Zone">
            <summary>
            Sets the value to be placed in <see cref="P:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.ServiceController">
            <summary>
            Builds a <see cref="T:System.ServiceProcess.ServiceControllerPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.ServiceController.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.ServiceController"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.ServiceController.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.ServiceController.MachineName">
            <summary>
            Sets the value to be placed in <see cref="P:System.ServiceProcess.ServiceControllerPermissionAttribute.MachineName"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.ServiceController.PermissionAccess">
            <summary>
            Sets the value to be placed in <see cref="P:System.ServiceProcess.ServiceControllerPermissionAttribute.PermissionAccess"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.ServiceController.ServiceName">
            <summary>
            Sets the value to be placed in <see cref="P:System.ServiceProcess.ServiceControllerPermissionAttribute.ServiceName"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.Permissions.AspNetHosting">
            <summary>
            Builds a <see cref="T:System.Web.AspNetHostingPermissionAttribute"/> attribute.
            </summary>
        </member>
        <member name="F:DotNetZen.CodeDom.Patterns.Permissions.AspNetHosting.Empty">
            <summary>
            An instance of <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.AspNetHosting"/> representing the default values.
            See <see cref="T:DotNetZen.CodeDom.Patterns.Permissions.Permission"/> for an explanation about the defaults.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.AspNetHosting.Type">
            <summary>
            Returns the attribute type associated with this permission.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.Permissions.AspNetHosting.Level">
            <summary>
            Sets the value to be placed in <see cref="P:System.Web.AspNetHostingPermissionAttribute.Level"/>.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternObserver">
             <summary>
             Represents the declaration of a field with a get/set accessor and an event that is raised when the value is changed.
             </summary>
             <example>Output example:<code>
            	/// &lt;summary&gt;
            	/// Value for the property &lt;see cref="MyValue" /&gt;.
            	/// &lt;/summary&gt;
            	private int m_MyValue;
            
            	public int MyValue
            	{
            		get
            		{
            			return this.m_MyValue;
            		}
            		set
            		{
            			if ((this.m_MyValue != value))
            			{
            				int oldValue = this.m_MyValue;
            				this.m_MyValue = value;
            				this.OnMyValueChanged(new MyValueChangedEventArgs(oldValue, this.m_MyValue));
            			}
            		}
            	}
            
            	/// &lt;summary&gt;
            	/// Occurs when the &lt;see cref="MyValue" /&gt; property is changed.
            	/// &lt;/summary&gt;
            	public event MyValueChangedEventHandler MyValueChanged;
            
            	/// &lt;summary&gt;
            	/// Raises the &lt;see cref="MyValueChanged" /&gt; event.
            	/// &lt;/summary&gt;
            	/// &lt;param name="e"&gt;The value passed for the event's e parameter.&lt;/param&gt;
            	protected virtual void OnMyValueChanged(MyValueChangedEventArgs e)
            	{
            		if ((this.MyValueChanged != null))
            		{
            			this.MyValueChanged(this, e);
            		}
            	}
            
            	/// &lt;summary&gt;
            	/// Represents a method that takes a &lt;see cref="System.Object" /&gt; and &lt;see cref="MyValueChangedEventArgs" /&gt;.
            	/// &lt;/summary&gt;
            	/// &lt;param name="sender"&gt;The event's originating object.&lt;/param&gt;
            	/// &lt;param name="e"&gt;The event's arguments.&lt;/param&gt;
            	public delegate void MyValueChangedEventHandler(object sender, MyValueChangedEventArgs e);
            
            	/// &lt;summary&gt;
            	/// Contains the arguments for events based on the &lt;see cref="MyValueChangedEventHandler" /&gt; delegate.
            	/// &lt;/summary&gt;
            	public class MyValueChangedEventArgs : System.EventArgs
            	{
            		/// &lt;summary&gt;
            		/// Value for the property &lt;see cref="OldValue" /&gt;.
            		/// &lt;/summary&gt;
            		private int m_OldValue;
            
            		/// &lt;summary&gt;
            		/// Value for the property &lt;see cref="NewValue" /&gt;.
            		/// &lt;/summary&gt;
            		private int m_NewValue;
            
            		/// &lt;summary&gt;
            		/// Initializes a new instance of the &lt;see cref="MyValueChangedEventArgs" /&gt; class.
            		/// &lt;/summary&gt;
            		/// &lt;param name="OldValue"&gt;The value before the change.&lt;/param&gt;
            		/// &lt;param name="NewValue"&gt;The current value.&lt;/param&gt;
            		public MyValueChangedEventArgs(int OldValue, int NewValue)
            		{
            			this.m_OldValue = OldValue;
            			this.m_NewValue = NewValue;
            		}
            
            		/// &lt;summary&gt;
            		/// Gets the value before the change.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The value before the change.&lt;/value&gt;
            		public virtual int OldValue
            		{
            			get
            			{
            				return this.m_OldValue;
            			}
            		}
            
            		/// &lt;summary&gt;
            		/// Gets the current value.
            		/// &lt;/summary&gt;
            		/// &lt;value&gt;The current value.&lt;/value&gt;
            		public virtual int NewValue
            		{
            			get
            			{
            				return this.m_NewValue;
            			}
            		}
            	}
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternObserver.#ctor(System.String,System.CodeDom.CodeTypeReference,DotNetZen.CodeDom.Scope)">
            <summary>
            Initializes a new instance of the CodePatternObserver class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="fieldType">The type of the field.</param>
            <param name="scope">The scope of the event.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternObserver.DelegatePattern">
            <summary>
            Gets the delegate pattern used in this pattern.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternObserver.GetFieldPattern">
            <summary>
            Gets the field/property pattern used in this pattern.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternObserver.EventPattern">
            <summary>
            Gets the event pattern used in this pattern.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternObserver.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty">
             <summary>
             Represents the declaration of a nullable value type field with a get/set accessors and null control actions.
             </summary>
             <example>Output example:<code>
            	private int m_Value;
            
            	/// &lt;summary&gt;
            	/// See &lt;see cref="IsValueNull" /&gt; for information about this field.
            	/// &lt;/summary&gt;
            	private bool m_IsValueNull = true;
            
            	public int Value
            	{
            		get
            		{
            			if ((this.m_IsValueNull == true))
            			{
            				throw new System.InvalidOperationException("Can not get value when it is null. Check for nullability by calling IsValueNull.");
            			}
            			return this.m_Value;
            		}
            		set
            		{
            			this.m_Value = value;
            			this.m_IsValueNull = false;
            		}
            	}
            
            	/// &lt;summary&gt;
            	/// Gets whether the value of &lt;see cref="Value" /&gt; is null.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;Whether the value of &lt;see cref="Value" /&gt; is null.&lt;/value&gt;
            	public bool IsValueNull
            	{
            		get
            		{
            			return this.m_IsValueNull;
            		}
            	}
            
            	/// &lt;summary&gt;
            	/// Sets the value of &lt;see cref="Value" /&gt; to null.
            	/// &lt;/summary&gt;
            	public void SetValueNull()
            	{
            		this.m_IsValueNull = true;
            	}
            	</code></example>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternGetField">
             <summary>
             Represents the declaration of a field with a get accessor.
             </summary>
             <example>Output example:<code>
            	private int m_Value;
            
            	public int Value
            	{
            		get
            		{
            			return this.m_Value;
            		}
            	}
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternGetField.#ctor(System.String,System.CodeDom.CodeTypeReference,DotNetZen.CodeDom.Scope)">
            <summary>
            Initializes a new instance of the CodePatternGetField class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <param name="scope">The scope of the event.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternGetField.#ctor(System.String,System.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the CodePatternGetField class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <remarks><see cref="P:DotNetZen.CodeDom.Patterns.CodePatternGetField.Scope"/> defaults to <see cref="F:DotNetZen.CodeDom.Scope.Instance"/></remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternGetField.#ctor(System.String,System.String,DotNetZen.CodeDom.Scope)">
            <summary>
            Initializes a new instance of the CodePatternGetField class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <param name="scope">The scope of the event.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternGetField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CodePatternGetField class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <remarks><see cref="P:DotNetZen.CodeDom.Patterns.CodePatternGetField.Scope"/> defaults to <see cref="F:DotNetZen.CodeDom.Scope.Instance"/></remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternGetField.#ctor(System.String,System.Type,DotNetZen.CodeDom.Scope)">
            <summary>
            Initializes a new instance of the CodePatternGetField class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <param name="scope">The scope of the event.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternGetField.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the CodePatternGetField class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <remarks><see cref="P:DotNetZen.CodeDom.Patterns.CodePatternGetField.Scope"/> defaults to <see cref="F:DotNetZen.CodeDom.Scope.Instance"/></remarks>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternGetField.Field">
            <summary>
            Gets the field declaration.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternGetField.Property">
            <summary>
            Gets the property declaration.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternGetField.Scope">
            <summary>
            Gets the scope of the field/property.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.#ctor(System.String,System.CodeDom.CodeTypeReference,DotNetZen.CodeDom.Scope)">
            <summary>
            Initializes a new instance of the CodePatternNullableProperty class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <param name="scope">The scope of the event.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.#ctor(System.String,System.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the CodePatternNullableProperty class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <remarks><see cref="T:DotNetZen.CodeDom.Scope"/> defaults to <see cref="F:DotNetZen.CodeDom.Scope.Instance"/></remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.#ctor(System.String,System.String,DotNetZen.CodeDom.Scope)">
            <summary>
            Initializes a new instance of the CodePatternNullableProperty class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <param name="scope">The scope of the event.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CodePatternNullableProperty class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <remarks><see cref="T:DotNetZen.CodeDom.Scope"/> defaults to <see cref="F:DotNetZen.CodeDom.Scope.Instance"/></remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.#ctor(System.String,System.Type,DotNetZen.CodeDom.Scope)">
            <summary>
            Initializes a new instance of the CodePatternNullableProperty class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <param name="scope">The scope of the event.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the CodePatternNullableProperty class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="type">The type of the field.</param>
            <remarks><see cref="T:DotNetZen.CodeDom.Scope"/> defaults to <see cref="F:DotNetZen.CodeDom.Scope.Instance"/></remarks>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.NullabilityField">
            <summary>
            Gets the nullability indication field.
            </summary>
            <value>The nullability indication field.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.IsFieldNull">
            <summary>
            Gets the nullability tester property.
            </summary>
            <value>The nullability tester property.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternNullableProperty.SetFieldNull">
            <summary>
            Gets the nullability setter method.
            </summary>
            <value>The nullability setter method.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation">
             <summary>
             Represents the declaration of methods for a asynchronous invocation of a method.
             </summary>
             <example>Output example:<code>
            	/// &lt;summary&gt;
            	/// Represents the delegate instance for asynchronous calls to MyMethod.
            	/// &lt;/summary&gt;
            	private MyMethodAsyncCallback m_MyMethodCallback;
            
            	/// &lt;summary&gt;
            	/// Executes the MyMethod method asynchronously with a callback.
            	/// &lt;/summary&gt;
            	/// &lt;param name="foo"&gt;See original method, MyMethod, for more information about this parameter.&lt;/param&gt;
            	/// &lt;param name="callback"&gt;A method to be called when the asynchronous action completes.&lt;/param&gt;
            	/// &lt;returns&gt;An &lt;see cref="System.IAsyncResult" /&gt; object detailing the asynchronous action.&lt;/returns&gt;
            	public System.IAsyncResult BeginMyMethod(int foo, System.AsyncCallback callback)
            	{
            		if ((this.m_MyMethodCallback == null))
            		{
            			this.m_MyMethodCallback = new MyMethodAsyncCallback(this.MyMethod);
            		}
            		return this.m_MyMethodCallback.BeginInvoke(foo, callback, null);
            	}
            
            	/// &lt;summary&gt;
            	/// Executes the MyMethod method asynchronously.
            	/// &lt;/summary&gt;
            	/// &lt;param name="foo"&gt;See original method, MyMethod, for more information about this parameter.&lt;/param&gt;
            	/// &lt;returns&gt;An &lt;see cref="System.IAsyncResult" /&gt; object detailing the asynchronous action.&lt;/returns&gt;
            	public System.IAsyncResult BeginMyMethod(int foo)
            	{
            		return this.BeginMyMethod(foo, null);
            	}
            
            	/// &lt;summary&gt;
            	/// Synchronously completes an asynchronous call to MyMethod.
            	/// &lt;/summary&gt;
            	/// &lt;param name="asyncResult"&gt;The &lt;see cref="System.IAsyncResult" /&gt; retrieved from the call to &lt;see cref="BeginMyMethod" /&gt;.&lt;/param&gt;
            	/// &lt;exception cref="System.InvalidOperationException"&gt;Thrown when the method is called before the &lt;see cref="BeginMyMethod" /&gt; method.&lt;/exception&gt;
            	public void EndMyMethod(System.IAsyncResult asyncResult)
            	{
            		if ((this.m_MyMethodCallback == null))
            		{
            			throw new System.InvalidOperationException("End of asynchronous operation attempted when one has not yet begun.");
            		}
            		this.m_MyMethodCallback.EndInvoke(asyncResult);
            	}
            
            	/// &lt;summary&gt;
            	/// Represents the delegate for asynchronous calls to MyMethod.
            	/// &lt;/summary&gt;
            	public delegate void MyMethodAsyncCallback(int foo);
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeTypeReference,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternAsyncOperation class.
            </summary>
            <param name="originalMethod">A reference to the method that is to be invoked.</param>
            <param name="returnType">The method's return type.</param>
            <param name="parameters">The parameters the method takes.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.#ctor(System.CodeDom.CodeMemberMethod)">
            <summary>
            Initializes a new instance of the CodePatternAsyncOperation class.
            </summary>
            <param name="originalMethod">The declaration of the method that is to be invoked.</param>
            <remarks>
            Please note that the default target for the invocation is <code>this</code> when the method is not flagged as <see cref="F:System.CodeDom.MemberAttributes.Static"/>
            and the containing type when the method is flagged as <see cref="F:System.CodeDom.MemberAttributes.Static"/>.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeMemberMethod)">
            <summary>
            Initializes a new instance of the CodePatternAsyncOperation class.
            </summary>
            <param name="target">The location of the invoked method.</param>
            <param name="originalMethod">The declaration of the method that is to be invoked.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternAsyncOperation class.
            </summary>
            <param name="originalMethod">A reference to the method that is to be invoked.</param>
            <param name="parameters">The parameters the method takes.</param>
            <remarks>The return value is inferred to be <see cref="T:System.Void"/>.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.Type,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternAsyncOperation class.
            </summary>
            <param name="originalMethod">A reference to the method that is to be invoked.</param>
            <param name="returnType">The method's return type.</param>
            <param name="parameters">The parameters the method takes.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.CallbackDelegate">
            <summary>
            Gets the private delegate used to make the asynchronous call.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.CallbackInstance">
            <summary>
            Gets the private instance of the delegate which points to the original method.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.BeginOperationWithCallback">
            <summary>
            Gets the method that calls BeginInvoke on <see cref="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.CallbackInstance"/> with a callback.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.BeginOperation">
            <summary>
            Gets the method that calls BeginInvoke on <see cref="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.CallbackInstance"/> without a callback.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.EndOperation">
            <summary>
            Gets the method that calls EndInvoke on <see cref="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.CallbackInstance"/>.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternAsyncOperation.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit">
            <summary>
            Provides a container for a CodeDOM program graph.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.#ctor">
            <summary>
            Initializes a new instance of the CodePatternCompileUnit class.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyTitle">
            <summary>
            Gets or sets an assembly title for the assembly manifest.
            </summary>
            <value>An assembly title for the assembly manifest.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyDescription">
            <summary>
            Gets or sets an assembly description for the assembly manifest.
            </summary>
            <value>An assembly description for the assembly manifest.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyConfiguration">
            <summary>
            Gets or sets the build configuration, such as retail or debug, for an assembly.
            </summary>
            <value>The build configuration, such as retail or debug, for an assembly.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyCompany">
            <summary>
            Gets or sets a company name for the assembly manifest.
            </summary>
            <value>A company name for the assembly manifest.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyProduct">
            <summary>
            Gets or sets a product name for the assembly manifest.
            </summary>
            <value>A product name for the assembly manifest.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyCopyright">
            <summary>
            Gets or sets a copyright for the assembly manifest.
            </summary>
            <value>A copyright for the assembly manifest.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyTrademark">
            <summary>
            Gets or sets a trademark for the assembly manifest.
            </summary>
            <value>A trademark for the assembly manifest.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyCulture">
            <summary>
            Gets or sets which culture the assembly supports.
            </summary>
            <value>The culture the assembly supports.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.AssemblyVersion">
            <summary>
            Gets or sets the version of the assembly.
            </summary>
            <value>The version of the assembly.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.ComVisible">
            <summary>
            Gets or sets whether types in the assembly are accessibile to COM.
            </summary>
            <value>true if types in the assembly are accessibile to COM; otherwise, false.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.CLSCompliant">
            <summary>
            Gets or sets whether the assembly is compliant with the Common Language Specification (CLS).
            </summary>
            <value>true if the assembly is compliant with the Common Language Specification (CLS); otherwise, false.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.Guid">
            <summary>
            Gets or sets an explicit <see cref="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.Guid"/> when an automatic GUID is undesirable.
            </summary>
            <value>The value of the explicit <see cref="P:DotNetZen.CodeDom.Patterns.CodePatternCompileUnit.Guid"/>.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.MultilineStatement">
            <summary>
            The base class for all Xml Comment classes, which supports multiline comments.
            </summary>
            <remarks>
            Please note that in frameworks up to 2.0, xml comments with line breaks would not render well:
            In the framework 2.0 this was fixed, but comments from the second line on do not have a space between them and the comment marker.
            <list type="table">
            	<listheader>
            		<term>
            			Version
            		</term>
            		<description>
            			Result
            		</description>
            	</listheader>
            	<item>
            		<term>
            			Expected
            		</term>
            		<description>
            			<code>/// Line one.
            			/// Line two.</code>
            		</description>
            	</item>
            	<item>
            		<term>
            			1.x
            		</term>
            		<description>
            			<code>/// Line one.
            			// Line two.</code>
            		</description>
            	</item>
            	<item>
            		<term>
            			2.0
            		</term>
            		<description>
            			<code>/// Line one.
            			///Line two.</code>
            		</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.MultilineStatement.#ctor">
            <summary>
            Initializes a new instance of the MultilineStatement class.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.MultilineStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MultilineStatement class.
            </summary>
            <param name="text">The text in the comment.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.MultilineStatement.SetText(System.String)">
            <summary>
            Sets the text in the comment.
            </summary>
            <param name="text">The text in the comment.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.SummaryStatements">
            <summary>
            Represents the &lt;summary&gt; tag: the summary of a member.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.SummaryStatements.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SummaryStatements class.
            </summary>
            <param name="text">The text that would appear inside the tag.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.TextAsCodeExpression">
            <summary>
            Represents the &lt;c&gt; tag: inline text marked as code.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.TextAsCodeExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TextAsCodeExpression class.
            </summary>
            <param name="text">The text that would appear inside the tag.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.TextAsCodeExpression.op_Implicit(DotNetZen.CodeDom.Patterns.XmlComments.TextAsCodeExpression)~System.String">
            <summary>
            Converts the object to its string representation.
            </summary>
            <param name="c">The original object.</param>
            <returns>The text in the object.</returns>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.TextAsCodeExpression.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.MultilineTextAsCodeStatements">
            <summary>
            Represents the &lt;code&gt; tag: a text block marked as code.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.MultilineTextAsCodeStatements.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MultilineTextAsCodeStatements class.
            </summary>
            <param name="text">The text that would appear inside the tag.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ExampleStatements">
            <summary>
            Represents the &lt;example&gt; tag: a text block that is an example.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ExampleStatements.#ctor(System.String,DotNetZen.CodeDom.Patterns.XmlComments.MultilineTextAsCodeStatements)">
            <summary>
            Initializes a new instance of the ExampleStatements class.
            </summary>
            <param name="explanation">The explanation of the example.</param>
            <param name="example">The code for the example.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ExceptionStatements">
            <summary>
            Represents the &lt;exception&gt; tag: an exception that might be thrown by the member.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ExceptionStatements.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ExceptionStatements class.
            </summary>
            <param name="type">The type of exception.</param>
            <param name="whenIsItThrown">The condition which causes the exception to be thrown. Usually begins with "Thrown when".</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ExceptionStatements.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the ExceptionStatements class.
            </summary>
            <param name="type">The type of exception.</param>
            <param name="whenIsItThrown">The condition which causes the exception to be thrown. Usually begins with "Thrown when".</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ExceptionStatements.#ctor(System.CodeDom.CodeTypeReference,System.String)">
            <summary>
            Initializes a new instance of the ExceptionStatements class.
            </summary>
            <param name="type">The type of exception.</param>
            <param name="whenIsItThrown">The condition which causes the exception to be thrown. Usually begins with "Thrown when".</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ListStatements">
            <summary>
            Represents the &lt;list&gt; tag: a list/table.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ListStatements.#ctor(DotNetZen.CodeDom.XmlCommentListType,DotNetZen.CodeDom.Patterns.XmlComments.ListItem,DotNetZen.CodeDom.Patterns.XmlComments.ListItem[])">
            <summary>
            Initializes a new instance of the ListStatements class.
            </summary>
            <param name="type">The type of list.</param>
            <param name="header">The list's header.</param>
            <param name="items">The items in the list.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ListStatements.#ctor(DotNetZen.CodeDom.XmlCommentListType,System.String,System.String[])">
            <summary>
            Initializes a new instance of the ListStatements class.
            </summary>
            <param name="type">The type of list.</param>
            <param name="header">The list's header.</param>
            <param name="items">The items in the list.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ListStatements.#ctor(DotNetZen.CodeDom.XmlCommentListType,DotNetZen.CodeDom.Patterns.XmlComments.ListItem[])">
            <summary>
            Initializes a new instance of the ListStatements class.
            </summary>
            <param name="type">The type of list.</param>
            <param name="items">The items in the list.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ListStatements.#ctor(DotNetZen.CodeDom.XmlCommentListType,System.String[])">
            <summary>
            Initializes a new instance of the ListStatements class.
            </summary>
            <param name="type">The type of list.</param>
            <param name="items">The items in the list.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ListStatements.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the ListStatements class.
            </summary>
            <param name="items">The items in the list.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ListItem">
            <summary>
            Represents an item in the &lt;list&gt; tag.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ListItem class.
            </summary>
            <param name="term">When the list is a table, the row's value in the first column. Otherwise, the term in the definition list.</param>
            <param name="description">When the list is a table, the row's value in the second column. Otherwise, the description in the definition list.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.ListItem.Term">
            <summary>
            Gets this row's term.
            </summary>
            <value>When the list is a table, the row's value in the first column. Otherwise, the term in the definition list.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.ListItem.Description">
            <summary>
            Gets this row's description.
            </summary>
            <value>When the list is a table, the row's value in the second column. Otherwise, the description in the definition list.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ParagraphExpression">
            <summary>
            Represents the &lt;para&gt; tag: a new paragraph in the text.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ParagraphExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParagraphExpression class.
            </summary>
            <param name="text">The text that would appear inside the tag.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ParagraphExpression.op_Implicit(DotNetZen.CodeDom.Patterns.XmlComments.ParagraphExpression)~System.String">
            <summary>
            Converts the object to its string representation.
            </summary>
            <param name="para">The original object.</param>
            <returns>The text in the object.</returns>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ParagraphExpression.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ParameterStatements">
            <summary>
            Represents the &lt;param&gt; tag: an explanation about a parameter that the member takes.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ParameterStatements.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ParameterStatements class.
            </summary>
            <param name="name">The parameter's name.</param>
            <param name="description">A description of this parameter.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ParameterReferenceExpression">
            <summary>
            Represents the &lt;paramref&gt; tag: a reference to a parameter that the member takes.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ParameterReferenceExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterReferenceExpression class.
            </summary>
            <param name="name">The parameter's name.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ParameterReferenceExpression.op_Implicit(DotNetZen.CodeDom.Patterns.XmlComments.ParameterReferenceExpression)~System.String">
            <summary>
            Converts the object to its string representation.
            </summary>
            <param name="paramRef">The original object.</param>
            <returns>The text in the object.</returns>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ParameterReferenceExpression.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.RemarksStatements">
            <summary>
            Represents the &lt;remarks&gt; tag: special remarks about the member.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.RemarksStatements.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RemarksStatements class.
            </summary>
            <param name="text">The text that would appear inside the tag.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ReturnsStatements">
            <summary>
            Represents the &lt;returns&gt; tag: an explanation about the method's return value.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ReturnsStatements.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ReturnsStatements class.
            </summary>
            <param name="text">The text that would appear inside the tag.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.SeeExpression">
            <summary>
            Represents the &lt;see&gt; tag: a reference to a type or member.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.SeeExpression.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the SeeExpression class.
            </summary>
            <param name="type">The referenced type.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.SeeExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SeeExpression class.
            </summary>
            <param name="member">The referenced member or type.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.SeeExpression.op_Implicit(DotNetZen.CodeDom.Patterns.XmlComments.SeeExpression)~System.String">
            <summary>
            Converts the object to its string representation.
            </summary>
            <param name="see">The original object.</param>
            <returns>The text in the object.</returns>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.SeeExpression.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.SeeAlsoStatements">
            <summary>
            Represents the &lt;seealso&gt; tag: a reference to a type or member that would appear in the See Also section.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.SeeAlsoStatements.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SeeAlsoStatements class.
            </summary>
            <param name="member">The referenced member or type.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.ValueStatements">
            <summary>
            Represents the &lt;value&gt; tag: an explanation about the value of the member.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.ValueStatements.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ValueStatements class.
            </summary>
            <param name="description">The value's description.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForProperty">
            <summary>
            The recommended Xml Comment representation for properties.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForProperty.#ctor(DotNetZen.CodeDom.PropertyAccessors,System.String)">
            <summary>
            Initializes a new instance of the ForPropertyStatements class.
            </summary>
            <param name="accessors">The property's accessors.</param>
            <param name="indicates">What the property indicates. For instance, <c>"whether the light is on."</c>.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForProperty.Summary">
            <summary>
            Gets the property's summary.
            </summary>
            <value>The property's summary.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForProperty.Value">
            <summary>
            Gets the property's return value.
            </summary>
            <value>The property's return value.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForIndexer">
            <summary>
            The recommended Xml Comment representation for indexed properties.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForIndexer.#ctor(DotNetZen.CodeDom.PropertyAccessors,System.String,DotNetZen.CodeDom.Patterns.XmlComments.ParameterStatements[])">
            <summary>
            Initializes a new instance of the ForIndexerStatements class.
            </summary>
            <param name="accessors">The indexer's accessors.</param>
            <param name="indicates">What the indexer indicates. For instance, <c>"whether the light is on for the bulb at index."</c>.</param>
            <param name="indexerParameters">Comments on the indexer's parameters.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForIndexer.GetParameterComment(System.String)">
            <summary>
            Gets the comment on a specific parameter.
            </summary>
            <param name="name">The parameter's name.</param>
            <returns>The comment set for the specified parameter.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="name"/> is not the name of a parameter.</exception>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForConstructor">
            <summary>
            The recommended Xml Comment representation for instance constructors.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForConstructor.#ctor(System.String,DotNetZen.CodeDom.Patterns.XmlComments.ParameterStatements[])">
            <summary>
            Initializes a new instance of the ForInstanceConstructor class.
            </summary>
            <param name="type">The name of the type (DO: MyTypeName; AVOID: MyNamespace.MyTypeName).</param>
            <param name="parameters">The parameters supplied to the constructor.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForConstructor.GetParameterComment(System.String)">
            <summary>
            Gets the comment on a specific parameter.
            </summary>
            <param name="name">The parameter's name.</param>
            <returns>The comment set for the specified parameter.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="name"/> is not the name of a parameter.</exception>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForConstructor.Summary">
            <summary>
            Gets the constructor's summary.
            </summary>
            <value>The constructor's summary.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForMethod">
            <summary>
            The recommended Xml Comment representation for methods.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForMethod.#ctor(System.String,DotNetZen.CodeDom.Patterns.XmlComments.ParameterStatements[])">
            <summary>
            Initializes a new instance of the CommentsForMethod class.
            </summary>
            <param name="summary">What the method does.</param>
            <param name="parameters">The parameters supplied to the method.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForMethod.#ctor(System.String,System.String,DotNetZen.CodeDom.Patterns.XmlComments.ParameterStatements[])">
            <summary>
            Initializes a new instance of the CommentsForMethod class.
            </summary>
            <param name="summary">What the method does.</param>
            <param name="returns">What the method returns.</param>
            <param name="parameters">The parameters supplied to the method.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForMethod.GetParameterComment(System.String)">
            <summary>
            Gets the comment on a specific parameter.
            </summary>
            <param name="name">The parameter's name.</param>
            <returns>The comment set for the specified parameter.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="name"/> is not the name of a parameter.</exception>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForMethod.Summary">
            <summary>
            Gets the method's summary.
            </summary>
            <value>The method's summary.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForMethod.Returns">
            <summary>
            Gets the method's return value.
            </summary>
            <value>The method's return value.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForDelegate">
            <summary>
            The recommended Xml Comment representation for delegates.
            </summary>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForDelegate.#ctor(System.String,DotNetZen.CodeDom.Patterns.XmlComments.ParameterStatements[])">
            <summary>
            Initializes a new instance of the CommentsForDelegate class.
            </summary>
            <param name="summary">What the delegate represents.</param>
            <param name="parameters">The parameters supplied to the delegate.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForDelegate.#ctor(System.String,System.String,DotNetZen.CodeDom.Patterns.XmlComments.ParameterStatements[])">
            <summary>
            Initializes a new instance of the CommentsForDelegate class.
            </summary>
            <param name="summary">What the delegate represents.</param>
            <param name="returns">What the delegate's return value represents.</param>
            <param name="parameters">The parameters supplied to the delegate.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForDelegate.GetParameterComment(System.String)">
            <summary>
            Gets the comment on a specific parameter.
            </summary>
            <param name="name">The parameter's name.</param>
            <returns>The comment set for the specified parameter.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="name"/> is not the name of a parameter.</exception>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForDelegate.Summary">
            <summary>
            Gets the delegate's summary.
            </summary>
            <value>The delegate's summary.</value>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.XmlComments.CommentsForDelegate.Returns">
            <summary>
            Gets the delegate's return value.
            </summary>
            <value>The delegate's return value.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternUnaryOperatorExpression">
            <summary>
            Represents an expression that consists of an unary operation on one expression.
            </summary>
            <example>Output example:<code>
            (bool1 == true)
            (bool1 == false)
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternUnaryOperatorExpression.#ctor(DotNetZen.CodeDom.CodePatternUnaryOperatorType,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternUnaryOperatorExpression class using the specified parameters.
            </summary>
            <param name="operator">A CodePatternUnaryOperatorType indicating the type of operator.</param>
            <param name="operand">The CodeExpression on which the operator will work.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternLock">
             <summary>
             Represents the expansion of C#'s lock keyword.
             </summary>
             <example>Output example:<code>
            	object lockCachedExpr0 = this.SyncRoot;
            	System.Threading.Monitor.Enter(lockCachedExpr0);
            
            	try
            	{
            		// ...
            	}
            	finally
            	{
            		System.Threading.Monitor.Exit(lockCachedExpr0);
            	}
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternLock.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the CodePatternLock class.
            </summary>
            <param name="lockedExpression">The expression to lock.</param>
            <param name="statements">The statements in the lock block.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternLock.Statements">
            <summary>
            The statements in the lock block.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternCompoundAssignStatement">
            <summary>
            Represents an assignment that's compound with an operator.
            </summary>
            <example>Output example:<code>foo = (foo + bar);</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCompoundAssignStatement.#ctor(System.CodeDom.CodeExpression,DotNetZen.CodeDom.CodePatternCompoundAssignmentOperatorType,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternCompoundAssignStatement class.
            </summary>
            <param name="left">The variable to assign to.</param>
            <param name="op">A CodePatternCompoundAssignmentOperatorType indicating the type of operator.</param>
            <param name="right">The value to assign with.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternCustomExceptionDeclaration">
            <summary>
            Represents the declaration of a custom exception.
            </summary>
            <example>Output example:<code>
            [System.SerializableAttribute()]
            public class FooException : System.Exception
            {
            	/// &lt;summary&gt;
            	/// Value for the property &lt;see cref="Bar" /&gt;.
            	/// &lt;/summary&gt;
            	private int m_Bar;
               
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="FooException" /&gt; class.
            	/// &lt;/summary&gt;
            	/// &lt;param name="Bar"&gt;A healthy snack-bar.&lt;/param&gt;
            	public FooException(int Bar)
            	{
            		this.m_Bar = Bar;
            	}
               
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="FooException" /&gt; class.
            	/// &lt;/summary&gt;
            	/// &lt;param name="Bar"&gt;A healthy snack-bar.&lt;/param&gt;
            	/// &lt;param name="message"&gt;The message in the exception.&lt;/param&gt;
            	public FooException(int Bar, string message) : 
            		base(message)
            	{
            		this.m_Bar = Bar;
            	}
               
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="FooException" /&gt; class.
            	/// &lt;/summary&gt;
            	/// &lt;param name="info"&gt;The data needed to serialize or deserialize an object.&lt;/param&gt;
            	/// &lt;param name="context"&gt;The source and destination of a given serialized stream.&lt;/param&gt;
            	/// &lt;remarks&gt;This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.&lt;/remarks&gt;
            	protected FooException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
            		base(info, context)
            	{
            		this.m_Bar = ((int)(info.GetValue("m_Bar", typeof(int))));
            	}
               
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="FooException" /&gt; class.
            	/// &lt;/summary&gt;
            	/// &lt;param name="Bar"&gt;A healthy snack-bar.&lt;/param&gt;
            	/// &lt;param name="message"&gt;The message in the exception.&lt;/param&gt;
            	/// &lt;param name="innerException"&gt;An exception encapsulated in the new exception.&lt;/param&gt;
            	public FooException(int Bar, string message, System.Exception innerException) : 
            		base(message, innerException)
            	{
            		this.m_Bar = Bar;
            	}
               
            	/// &lt;summary&gt;
            	/// Gets a healthy snack-bar.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;A healthy snack-bar.&lt;/value&gt;
            	public int Bar
            	{
            		get
            		{
            			return this.m_Bar;
            		}
            	}
               
            	/// &lt;summary&gt;
            	/// Populates a &lt;see cref="System.Runtime.Serialization.SerializationInfo" /&gt; with the data needed to serialize the target object.
            	/// &lt;/summary&gt;
            	/// &lt;param name="info"&gt;The &lt;see cref="System.Runtime.Serialization.SerializationInfo" /&gt; to populate with data.&lt;/param&gt;
            	/// &lt;param name="context"&gt;The destination (see &lt;see cref="System.Runtime.Serialization.StreamingContext" /&gt;) for this serialization.&lt;/param&gt;
            	/// &lt;exception cref="System.ArgumentNullException"&gt;Thrown when the &lt;paramref name="info" /&gt; parameter is a null reference (Nothing in Visual Basic).&lt;/exception&gt;
            	[System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Flags=System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter)]
            	public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            	{
            		base.GetObjectData(info, context);
            		info.AddValue("m_Bar", this.m_Bar, typeof(int));
            	}
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCustomExceptionDeclaration.#ctor(System.String,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternCustomExceptionDeclaration class.
            </summary>
            <param name="name">The name of the exception sans the Exception suffix.</param>
            <param name="fields">The custom fields in the exception.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCustomExceptionDeclaration.SetComment(System.String,System.String)">
            <summary>
            Sets the comment for a property of the exception.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="comment">The comment for the parameter.</param>
            <exception cref="T:System.NotSupportedException">Thrown when the property does not exist.</exception>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomExceptionDeclaration.ParameterlessConstructor">
            <summary>
            Gets the parameterless (unless fields are appended) constructor.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomExceptionDeclaration.MessageConstructor">
            <summary>
            Gets the constructor only with message (unless fields are appended).
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomExceptionDeclaration.InnerExceptionConstructor">
            <summary>
            Gets the constructor only with message and inner exception (unless fields are appended).
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomExceptionDeclaration.GetFields">
            <summary>
            Gets the fields in the exception.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCustomExceptionDeclaration.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternDelegate">
            <summary>
            Represents the declaration of an EventHandler delegate with a specialized EventArgs class.
            </summary>
            <example>Output example:<code>
            /// &lt;summary&gt;
            /// Represents a method that takes a &lt;see cref="System.Object" /&gt; and &lt;see cref="ItemChangedEventArgs" /&gt;.
            /// &lt;/summary&gt;
            /// &lt;param name="sender"&gt;The event's originating object.&lt;/param&gt;
            /// &lt;param name="e"&gt;The event's arguments.&lt;/param&gt;
            public delegate void ItemChangedEventHandler(object sender, ItemChangedEventArgs e);
               
            /// &lt;summary&gt;
            /// Contains the arguments for events based on the &lt;see cref="ItemChangedEventHandler" /&gt; delegate.
            /// &lt;/summary&gt;
            public class ItemChangedEventArgs : System.EventArgs
            {
                   
            	/// &lt;summary&gt;
            	/// Value for the property &lt;see cref="OldValue" /&gt;.
            	/// &lt;/summary&gt;
            	private int m_OldValue;
                   
            	/// &lt;summary&gt;
            	/// Value for the property &lt;see cref="NewValue" /&gt;.
            	/// &lt;/summary&gt;
            	private int m_NewValue;
                   
            	/// &lt;summary&gt;
            	/// Initializes a new instance of the &lt;see cref="ItemChangedEventArgs" /&gt; class.
            	/// &lt;/summary&gt;
            	/// &lt;param name="OldValue"&gt;The value before the change.&lt;/param&gt;
            	/// &lt;param name="NewValue"&gt;The value after the change.&lt;/param&gt;
            	public ItemChangedEventArgs(int OldValue, int NewValue)
            	{
            		this.m_OldValue = OldValue;
            		this.m_NewValue = NewValue;
            	}
                   
            	/// &lt;summary&gt;
            	/// Gets the value before the change.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;The value before the change.&lt;/value&gt;
            	public virtual int OldValue
            	{
            		get
            		{
            			return this.m_OldValue;
            		}
            	}
                   
            	/// &lt;summary&gt;
            	/// Gets the value after the change.
            	/// &lt;/summary&gt;
            	/// &lt;value&gt;The value after the change.&lt;/value&gt;
            	public virtual int NewValue
            	{
            		get
            		{
            			return this.m_NewValue;
            		}
            	}
            }
            </code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternDelegate.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternDelegate class.
            </summary>
            <param name="name">The name of the delegate.</param>
            <param name="returnValue">The return type for the delegate.</param>
            <param name="parameters">The parameters that should be in the EventArgs.</param>
            <remarks>The EventHandler and EventArgs suffixes are appended automatically to the name.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternDelegate.#ctor(System.String,System.Type,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternDelegate class.
            </summary>
            <param name="name">The name of the delegate.</param>
            <param name="returnValue">The return type for the delegate.</param>
            <param name="parameters">The parameters that should be in the EventArgs.</param>
            <remarks>The EventHandler and EventArgs suffixes are appended automatically to the name.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternDelegate.#ctor(System.String,System.CodeDom.CodeParameterDeclarationExpression[])">
            <summary>
            Initializes a new instance of the CodePatternDelegate class with a void return value.
            </summary>
            <param name="name">The name of the delegate.</param>
            <param name="parameters">The parameters that should be in the EventArgs.</param>
            <remarks>The EventHandler and EventArgs suffixes are appended automatically to the name.</remarks>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternDelegate.SetComment(System.String,System.String)">
            <summary>
            Sets the comment for a property of the event arguments.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="comment">The comment for the parameter.</param>
            <exception cref="T:System.NotSupportedException">Thrown when the property does not exist.</exception>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternDelegate.Delegate">
            <summary>
            Gets the delegate.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternDelegate.EventArgs">
            <summary>
            Gets the specialized EventArgs class.
            </summary>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternDelegate.HasComments">
            <summary>
            Gets or sets whether the members generated by the pattern have comments.
            </summary>
            <value>Whether the members generated by the pattern have comments.</value>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternCursorLock">
             <summary>
             Represents the locking of a cursor to an hourglass until the end of the contained statements.
             </summary>
             <example>Output example:<code>
            	System.Windows.Forms.Cursor cursor0 = this.Cursor;
            
            	try
            	{
            		this.Cursor = System.Windows.Forms.Cursors.WaitCursor;
            		
            		// More code here...
            	}
            	finally
            	{
            		this.Cursor = cursor0;
            	}
            	</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCursorLock.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the CodePatternCursorLock class.
            </summary>
            <param name="formReference">The reference to the form object whose cursor should be locked.</param>
            <param name="statements">The statements during which the cursor is locked.</param>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternCursorLock.#ctor(System.CodeDom.CodeStatement[])">
            <summary>
            Initializes a new instance of the CodePatternCursorLock class when the statements are in the form.
            </summary>
            <param name="statements">The statements during which the cursor is locked.</param>
        </member>
        <member name="P:DotNetZen.CodeDom.Patterns.CodePatternCursorLock.Statements">
            <summary>
            The statements in the try/finally block.
            </summary>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternBinaryOperatorExpression">
            <summary>
            Represents an expression that consists of a binary operation between two expressions.
            </summary>
            <example>Output example:<code>((bool1 == true) &amp;&amp; (bool2 == false)) || ((bool1 == false) &amp;&amp; (bool2 == true))</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,DotNetZen.CodeDom.CodePatternBinaryOperatorType,System.CodeDom.CodeExpression)">
            <summary>
            Initializes a new instance of the CodePatternBinaryOperatorExpression class.
            </summary>
            <param name="left">The CodeExpression on the left of the operator.</param>
            <param name="op">A CodeBinaryOperatorType indicating the type of operator.</param>
            <param name="right">The CodeExpression on the right of the operator.</param>
        </member>
        <member name="T:DotNetZen.CodeDom.Patterns.CodePatternIsInstExpression">
            <summary>
            Represents the closest expression to IL's isinst opcode (C#'s is keyword).
            </summary>
            <example>Output example:<code>myVariable.GetType().IsInstanceOfType(typeof(System.IComparable))</code></example>
        </member>
        <member name="M:DotNetZen.CodeDom.Patterns.CodePatternIsInstExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeTypeReference)">
            <summary>
            Initializes a new instance of the CodePatternIsExpression class.
            </summary>
            <param name="instance">A reference to the instance being tested.</param>
            <param name="type">The type being tested against.</param>
        </member>
    </members>
</doc>
