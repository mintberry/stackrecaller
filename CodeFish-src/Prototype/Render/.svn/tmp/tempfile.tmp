using System;
using System.Drawing;
using System.Collections.Generic;

namespace Prototype
{

	public class FisheyeRender : IRenderStrategy
	{
		struct IndexWeight
		{
			public IndexWeight(int index, float weight)
			{
				this.index = index;
				this.weight = weight;
			}
				
			public int index;
			public float weight;
		}
		
		#region Comparers
		public class IndexComparer : IComparer<IndexWeight>
		{
			int IComparer<IndexWeight>.Compare( IndexWeight x, IndexWeight y )
			{
				return (x.index < y.index) ? -1 : 1;
			}
		}
		
		public class WeightComparer : IComparer<IndexWeight>
		{
			// reverse sort as we need a list sorted by descending weight
			int IComparer<IndexWeight>.Compare( IndexWeight x, IndexWeight y )
			{
				return (x.weight < y.weight) ? -1 : 1;
			}

		}
		#endregion
		
		// Returns list of index/weight pairs for items in range start->end
		private List<IndexWeight> SortWeights(float[] weights, int start, int end)
		{
			List<IndexWeight> list = new List<IndexWeight>();
			for (int i = start; i < end; i++)
				list.Add(new IndexWeight(i, weights[i]));
			
			// Sort by order of descending weight
			list.Sort(new WeightComparer());
			list.Reverse();
			
			return list;		
		}
		
		// Pick highest weighted items whose sum of heights is just less than the height of the area
		// and returns them sorted by original index(line number).
		private int FillArea(int height, ref List<IndexWeight> list, Font font, float minFontSize, Graphics g)
		{
			List<IndexWeight> shownList = new List<IndexWeight>();
			
			int totalHeight = 0;
			
			foreach (IndexWeight line in list)
			{
				float fontSize = Math.Max( font.Size * line.weight, minFontSize);
				int lineHeight = (int)new Font(font.FontFamily, fontSize).GetHeight(g);

				totalHeight += lineHeight;
				shownList.Add(line);

				if (totalHeight >= height)
					break;
			}
			
			shownList.Sort(new IndexComparer());
			list = shownList;
			
			return totalHeight;
		}
			
		public Layout generateLayout(Size size, float[] weights, Font font, float minFontSize, FocusArea focus, Graphics g)
		{
			
			
			Layout layout = new Layout(size, weights.Length);

			int fontHeight = (int)font.GetHeight(g);

			int focusHeight = fontHeight * focus.Lines;
			int contextHeight = size.Height - focusHeight;
			
			int contextLines = weights.Length - focus.Lines;
			int topLines = focus.Start;
			int bottomLines = weights.Length - focus.End - 1;
			
			int topHeight = (contextHeight * topLines) / contextLines;
			int bottomHeight = (contextHeight * bottomLines) / contextLines;
	
			// Layout focus area
			for (int i=focus.Start; i <= focus.End; i++)
			{
				layout.lines[i].inFocus = true;
				layout.lines[i].shown = true;
				layout.lines[i].renderedSize = fontHeight;
				layout.lines[i].fontSize = font.Size;
				layout.lines[i].y = topHeight + fontHeight * (i - focus.Start);
			}

			// Layout top context
			LayoutArea(weights, font, minFontSize, g, ref layout, 0, topLines, topHeight, 0, true);

            // Layout bottom context
			LayoutArea(weights, font, minFontSize, g, ref layout, weights.Length - bottomLines, weights.Length, bottomHeight, size.Height - bottomHeight - 1, false);

			return layout;
		}

        private int LayoutArea(float[] weights, Font font, float minFontSize, Graphics g, ref Layout layout, int start, int end, int height, int y, bool alignToBottom)
        {

        	int startY = y;
            List<IndexWeight> sortedList = SortWeights(weights, start, end);
            int itemsHeight = FillArea(height, ref sortedList, font, minFontSize, g);
			
            if(alignToBottom)
             y = height - itemsHeight;
            
            foreach (IndexWeight item in sortedList)
            {
                layout.lines[item.index].inFocus = false;
                layout.lines[item.index].shown = true;
                layout.lines[item.index].fontSize = Math.Max(font.Size * item.weight, minFontSize);
                layout.lines[item.index].renderedSize = (int)new Font(font.FontFamily, layout.lines[item.index].fontSize).GetHeight(g);
                layout.lines[item.index].y = y;
                y += layout.lines[item.index].renderedSize;
            }
            
            return y;
        }

	}
}
