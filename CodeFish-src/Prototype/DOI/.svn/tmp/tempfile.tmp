using System;
using System.Collections.Generic;
using System.Text;
using DDW;
using DDW.Collections;
using DDW.Names;
using System.Text.RegularExpressions;

namespace Prototype
{
    class SemanticDOI : IDOIStrategy
    {

        private const int SEMANTIC_GAIN = 40;
        private const int NAMESPACE_GAIN = 30;
        private const int TYPE_GAIN = 20;
        private const int CLASS_GAIN = 30;
        private const int PROPERTY_GAIN = 15;
        private const int METHOD_GAIN = 20;
        private const int BLOCK_GAIN = 5;


        private float[][] _weights;



        // Base interests - classes = 30, methods = 20, ...
        private float[] _baseInterests;

        //Block indendation filtered per line
        private float[][] _syntacticInterests;

        //Indentation of each line
        private int[] _indentation;

        //Semantic weights
        private float[][] _semanticWeights;

        //Lines with { or } only
        private bool[] _almostSkips;


        public SemanticDOI()
        {
            Settings.Default.DrawSeperator = false;
            Settings.Default.MinFontSize = (int)Settings.Default.Font.Size;
            Model.Default.OnModelChanged += new Model.ModelChangedDelegate(OnModelChanged);
        }

        void OnModelChanged()
        {
            CreateDOIData();
        }

        public float[] Weights
        {
            get
            {
                if (Model.Default.Focus == null)
                    return _weights[0];
                else
                    return _weights[Model.Default.Focus.Center];
            }
        }

        private float API(int i)
        {
            return _baseInterests[i] - (float)Math.Sqrt(2 * _indentation[i]);
        }

        //Same indentation
        private float Syntactic(int focus, int i)
        {
            float realDistanceBonus = 0f;
            bool notInFocusArea = Math.Abs(focus - i) >= Model.Default.FocusAreaRadius;
            if (notInFocusArea)
                realDistanceBonus = Math.Max(20-(0.3f*(float)(Math.Abs(focus - i) - Model.Default.FocusAreaRadius + 1)),0f);

            if (notInFocusArea && _almostSkips[i])
                return 0;
            else
                return 4 * _syntacticInterests[focus][i] + realDistanceBonus;
        }

        //References
        private float Semantic(int focus, int i)
        {
            return _semanticWeights[focus][i];
        }

        public void OnFocusChanged()
        {

        }

        private void CreateDOIData()
        {
            CreateAPIWeights();
            CreateSyntacticWeights();
            CreateSemanticWeights();
            CreateAlmostSkipList();
            CreateWeights();
            
        }

        private void CreateAlmostSkipList()
        {
            _almostSkips = new bool[Model.Default.Length];
            for (int i = 0; i < Model.Default.Length; i++)
            {
                bool almostSkip =
                    Regex.IsMatch(Model.Default.Document[i], @"^\s*\{\s*$")
                    //Regex.IsMatch(Model.Default.Document[i], @"^\s*[\{\}]\s*$")
                    || Regex.IsMatch(Model.Default.Document[i], @"^\s*//.*$")
                    || Regex.IsMatch(Model.Default.Document[i], @"^\s*#.*"); 
                _almostSkips[i] = almostSkip;
            }
        }
        
        private void CreateAPIWeights()
        {
            CreateBaseInterests();
            CreateIndentationList();
        }



        private void AddToNameTable(Dictionary<string,List<int>> nameTable, MemberNode idn)
        {

            string name = idn.Names[0].GenericIdentifier;
            int line = idn.RelatedToken.Line-1;

            if (nameTable.ContainsKey(name))
                nameTable[name].Add(line);
            else
            {
                List<int> lines = new List<int>();
                lines.Add(line);
                nameTable.Add(name, lines);
            }
        }

        private void CreateSemanticWeights()
        {
            _semanticWeights = new float[Model.Default.Length][];
            for (int i = 0; i < _semanticWeights.Length; i++)
            {
                _semanticWeights[i] = new float[Model.Default.Length];
                for (int j = 0; j < _semanticWeights[i].Length; j++)
                {
                    _semanticWeights[i][j] = 0;
                }
            }

            Dictionary<string, List<int>> nameTable = new Dictionary<string, List<int>>();


            foreach (NamespaceNode nsn in Model.Default.ParsedDocument.Namespaces)
            {
                foreach (ClassNode cn in nsn.Classes)
                {
                    foreach (MethodNode mn in cn.Methods)
                        AddToNameTable(nameTable, mn);

                    foreach (FieldNode fn in cn.Fields)
                        AddToNameTable(nameTable, fn);

                    foreach (PropertyNode pn in cn.Properties)
                        AddToNameTable(nameTable, pn);

                }
            }


            Dictionary<string, List<int>> referenceTable = new Dictionary<string, List<int>>();

            foreach (KeyValuePair<string, List<int>> d in nameTable)
            {
                referenceTable.Add(d.Key, new List<int>());
            }

            LinkedListNode<DDW.Token> token = Model.Default.LexedDocument.First;

            List<string> par = new List<string>(); //For debugging
            while (token != null)
            {
                if (token.Value.ID == TokenID.Ident)
                {
                    int count;
                    if (token.Next == null || token.Next.Value.Line != token.Value.Line)
                        count = Model.Default.Document[token.Value.Line - 1].Length - (token.Value.Col);
                    else
                        count = token.Next.Value.Col - token.Value.Col;

                    string part = Model.Default.Document[token.Value.Line - 1].Substring(token.Value.Col, count).Trim();
                    par.Add(part);

                    if (referenceTable.ContainsKey(part) && !referenceTable[part].Contains(token.Value.Line-1))
                        referenceTable[part].Add(token.Value.Line-1);
                }
                token = token.Next;
            }


            foreach (KeyValuePair<string, List<int>> kv in referenceTable)
            {
                foreach (int j in kv.Value)
                {
                    for (int f = -Model.Default.FocusAreaRadius; f < Model.Default.FocusAreaRadius; f++)
                    {
                        if (j + f < 0 || j + f >= Model.Default.Length)
                            continue;

                        foreach (int i in nameTable[kv.Key])
                        {
                            _semanticWeights[j + f][i] = SEMANTIC_GAIN;
                        }
                        
                    }
                }
            }
        }


        

        private void CreateWeights()
        {
            _weights = new float[Model.Default.Length][];

            for (int x = 0; x < Model.Default.Length; x++)
            {
                _weights[x] = new float[Model.Default.Length];

                float max = int.MinValue;
                for (int i = 0; i < _weights[x].Length; i++)
                {
                    float weight;
                    if (Model.Default.Skips[i])
                        weight = 0f;
                    else
                    {
                        weight =
                            API(i)
                            + Syntactic(x, i) //Not distance, but bonus
                            + Semantic(x, i); //Not distance, but bonus
                    }

                    weight = Math.Max(weight, 0f);

                    max = Math.Max(max, weight);
                    _weights[x][i] = weight;

                }

                for (int i = 0; i < _weights[x].Length; i++)
                {
                    _weights[x][i] = _weights[x][i] / max;
                }
            }
              
        }

        private void CreateSyntacticWeights()
        {
            _syntacticInterests = new float[Model.Default.Length][];
            for (int i = 0; i < Model.Default.Length; i++)
            {
                _syntacticInterests[i] = new float[Model.Default.Length];



                float maxIndentation = _indentation[i];
                //Before current line
                for (int j = i - 1; j >= 0; j--)
                {
                    maxIndentation = (float)Math.Min(maxIndentation, _indentation[j]);
                    if (_indentation[j] > maxIndentation)
                        _syntacticInterests[i][j] = 0;
                    else
                        _syntacticInterests[i][j] = maxIndentation;

                }

                maxIndentation = _indentation[i];
                //After current line
                for (int j = i + 1; j < Model.Default.Length; j++)
                {
                    maxIndentation = (float)Math.Min(maxIndentation, _indentation[j]);
                    if (_indentation[j] > maxIndentation)
                        _syntacticInterests[i][j] = 0;
                    else
                        _syntacticInterests[i][j] = maxIndentation;

                }
            }
        }

        private void CreateIndentationList()
        {
            _indentation = new int[Model.Default.Length];
            int prevIndentation = 0;
            for (int i = 0; i < Model.Default.Length; i++)
            {
                if (Model.Default.Skips[i])
                    _indentation[i] = prevIndentation;
                else
                {
                    int indentation = Model.Default.Document[i].Length - Model.Default.Document[i].TrimStart().Length;
                    _indentation[i] = indentation;
                    prevIndentation = indentation;
                }
            }
        }

        private void CreateBaseInterests()
        {
            _baseInterests = new float[Model.Default.Length];


            foreach (DDW.Token tok in Model.Default.LexedDocument)
            {
                int add = 0;
                switch (tok.ID)
                {

                    case TokenID.Public:
                    case TokenID.Private:
                    case TokenID.Delegate:
                        add = METHOD_GAIN;
                        break;

                    case TokenID.Class:
                    
                        add = CLASS_GAIN;
                        break;

                    case TokenID.Enum:
                    case TokenID.Struct:
                        add = TYPE_GAIN;
                        break;

                    case TokenID.Namespace:
                        add = NAMESPACE_GAIN;
                        break;


                    case TokenID.Property:
                    case TokenID.Field:
                        add = PROPERTY_GAIN;
                        break;

<<<<<<< .mine
                    case TokenID.PpRegion:
                    //case TokenID.PpEndregion:
                       // add = REGION_GAIN;
                        break;
=======
>>>>>>> .r412


                    case TokenID.For:
                    case TokenID.Foreach:
                    case TokenID.While:
                    case TokenID.If:
                    case TokenID.Else:
                    case TokenID.Case:
                    case TokenID.Switch:
                    case TokenID.Try:
                    case TokenID.Catch:
                        add = BLOCK_GAIN;
                        break;
                        
                    default:
                        break;
                }
                _baseInterests[tok.Line - 1] += add;
            }
        }

        public void Reset()
        {
            CreateDOIData();

        }
    }
}

