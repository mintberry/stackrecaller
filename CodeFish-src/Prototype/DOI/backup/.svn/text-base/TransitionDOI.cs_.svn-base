using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Diagnostics;
using System.ComponentModel;

namespace Prototype
{
    public class TransitionMap
    {
        int[] counters;
        int _size;
        int _max = 1;

        public int Max
        {
            get { return _max; }
        }

        public int Size
        {
            get { return _size; }
        }


        public TransitionMap(int size)
        {
            _size = size;
            counters = new int[size * size];
        }

        public void IncrementCircle(int x, int y, int radius)
        {
            Rectangle r = new Rectangle(0, 0, _size, _size);
            for (int u = x - radius; u <= x + radius; u++)
                for (int v = y - radius; v <= y + radius; v++)
                    if (r.Contains(u, v) && (u - x) * (u - x) + (v - y) * (v - y) <= radius * radius)
                        this[u, v]++;
        }

        public void Reset()
        {
            counters = new int[_size * _size];
            _max = 1;
        }

        public int this[int from, int to]
        {
            get
            {
                return counters[from + to * _size];
            }
            set
            {
                counters[from + to * _size] = value;
                _max = Math.Max(_max, value);
            }
        }
    }

    class TransitionDOI : IDOIStrategy
    {
        private FocusArea _lastFocus;
        private FocusArea _newFocus;
        private DateTime _lastTime;
        private TransitionMap map;
        private float _timeout = 1000f;
        private int _radius = 10;

        [CategoryAttribute("Settings"),
        DescriptionAttribute("Radius of transition effect.")]
        public int Radius
        {
            get { return _radius; }
            set { _radius = value; }
        }

        [CategoryAttribute("Settings"),
        DescriptionAttribute("Milliseconds before a focus change is considered a transition.")]
        public float Timeout
        {
            get { return _timeout; }
            set { _timeout = value; }
        }

        TransitionDOIDialog dialog;

        public TransitionDOI()
        {
        }

        public void OnModelChanged()
        {
            map = new TransitionMap(Model.Default.Length);
            dialog = new TransitionDOIDialog(map);
            dialog.Show();
        }

        float[] IDOIStrategy.Weights
        {
            get
            {
                float[] weights = new float[map.Size];

                if (_newFocus != null)
                {

                    float max = 0;
                    for (int i = 0; i < map.Size; i++)
                    {
                        float distanceBonus = 1f / (_newFocus.Distance(i) + 1);
                        weights[i] = (_newFocus.IsInside(i) ? 0f : map[_newFocus.Center, i]) + distanceBonus * 0.01f;
                        max = Math.Max(weights[i], max);
                    }

                    for (int i = 0; i < map.Size; i++)
                    {
                        weights[i] /= max;
                    }

                }

                return weights;
            }
        }

        public void OnFocusChanged()
        {
            dialog.FocusArea = Model.Default.Focus;
            _newFocus = Model.Default.Focus.Clip(map.Size);

            if (_lastFocus != null)
            {
                if ((float)((TimeSpan)(DateTime.Now - _lastTime)).TotalMilliseconds > _timeout && _newFocus.Center != _lastFocus.Center)
                {
                    _lastTime = DateTime.Now;
                    map.IncrementCircle(_lastFocus.Center, _newFocus.Center, _radius);
                    //map[_lastFocus.Center, _newFocus.Center]++;
                    _lastFocus = _newFocus;
                }
                else
                    _lastTime = DateTime.Now;
            }
            else
            {
                _lastFocus = _newFocus;
                _lastTime = DateTime.Now;
            }
        }



        public void Reset()
        {
            map.Reset();
            dialog.Refresh();
        }
    }
}
